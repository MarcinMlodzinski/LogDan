
SR_projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ad8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005c60  08005c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ca8  08005ca8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ca8  08005ca8  00015ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cb0  08005cb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cb0  08005cb0  00015cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cb4  08005cb4  00015cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  2000000c  08005cc4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08005cc4  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001880e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b8  00000000  00000000  0003884a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0003c108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  0003d550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a5ca  00000000  00000000  0003e7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be5d  00000000  00000000  00068dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc402  00000000  00000000  00084c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00181021  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005228  00000000  00000000  00181074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c48 	.word	0x08005c48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005c48 	.word	0x08005c48

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * EXTI
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	4b9d      	ldr	r3, [pc, #628]	; (8000758 <MX_GPIO_Init+0x28c>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a9c      	ldr	r2, [pc, #624]	; (8000758 <MX_GPIO_Init+0x28c>)
 80004e8:	f043 0310 	orr.w	r3, r3, #16
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b9a      	ldr	r3, [pc, #616]	; (8000758 <MX_GPIO_Init+0x28c>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0310 	and.w	r3, r3, #16
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	4b97      	ldr	r3, [pc, #604]	; (8000758 <MX_GPIO_Init+0x28c>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a96      	ldr	r2, [pc, #600]	; (8000758 <MX_GPIO_Init+0x28c>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b94      	ldr	r3, [pc, #592]	; (8000758 <MX_GPIO_Init+0x28c>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0304 	and.w	r3, r3, #4
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000512:	4b91      	ldr	r3, [pc, #580]	; (8000758 <MX_GPIO_Init+0x28c>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a90      	ldr	r2, [pc, #576]	; (8000758 <MX_GPIO_Init+0x28c>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b8e      	ldr	r3, [pc, #568]	; (8000758 <MX_GPIO_Init+0x28c>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b8b      	ldr	r3, [pc, #556]	; (8000758 <MX_GPIO_Init+0x28c>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a8a      	ldr	r2, [pc, #552]	; (8000758 <MX_GPIO_Init+0x28c>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b88      	ldr	r3, [pc, #544]	; (8000758 <MX_GPIO_Init+0x28c>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	4b85      	ldr	r3, [pc, #532]	; (8000758 <MX_GPIO_Init+0x28c>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a84      	ldr	r2, [pc, #528]	; (8000758 <MX_GPIO_Init+0x28c>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b82      	ldr	r3, [pc, #520]	; (8000758 <MX_GPIO_Init+0x28c>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055a:	4b7f      	ldr	r3, [pc, #508]	; (8000758 <MX_GPIO_Init+0x28c>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a7e      	ldr	r2, [pc, #504]	; (8000758 <MX_GPIO_Init+0x28c>)
 8000560:	f043 0308 	orr.w	r3, r3, #8
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b7c      	ldr	r3, [pc, #496]	; (8000758 <MX_GPIO_Init+0x28c>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0308 	and.w	r3, r3, #8
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f240 1109 	movw	r1, #265	; 0x109
 8000578:	4878      	ldr	r0, [pc, #480]	; (800075c <MX_GPIO_Init+0x290>)
 800057a:	f001 fc3b 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	210c      	movs	r1, #12
 8000582:	4877      	ldr	r0, [pc, #476]	; (8000760 <MX_GPIO_Init+0x294>)
 8000584:	f001 fc36 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058e:	4875      	ldr	r0, [pc, #468]	; (8000764 <MX_GPIO_Init+0x298>)
 8000590:	f001 fc30 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800059a:	4872      	ldr	r0, [pc, #456]	; (8000764 <MX_GPIO_Init+0x298>)
 800059c:	f001 fc2a 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2180      	movs	r1, #128	; 0x80
 80005a4:	4870      	ldr	r0, [pc, #448]	; (8000768 <MX_GPIO_Init+0x29c>)
 80005a6:	f001 fc25 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 80005aa:	2308      	movs	r3, #8
 80005ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b6:	2302      	movs	r3, #2
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4619      	mov	r1, r3
 80005c0:	4866      	ldr	r0, [pc, #408]	; (800075c <MX_GPIO_Init+0x290>)
 80005c2:	f001 fa6d 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 80005c6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80005ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005cc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	4861      	ldr	r0, [pc, #388]	; (8000764 <MX_GPIO_Init+0x298>)
 80005de:	f001 fa5f 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 80005e2:	2307      	movs	r3, #7
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	4619      	mov	r1, r3
 80005f4:	485b      	ldr	r0, [pc, #364]	; (8000764 <MX_GPIO_Init+0x298>)
 80005f6:	f001 fa53 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 80005fa:	232f      	movs	r3, #47	; 0x2f
 80005fc:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fe:	2300      	movs	r3, #0
 8000600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000602:	2302      	movs	r3, #2
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4619      	mov	r1, r3
 800060c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000610:	f001 fa46 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000614:	2310      	movs	r3, #16
 8000616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000618:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800061c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f001 fa38 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000630:	2304      	movs	r3, #4
 8000632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000638:	2301      	movs	r3, #1
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063c:	2303      	movs	r3, #3
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4619      	mov	r1, r3
 8000646:	4846      	ldr	r0, [pc, #280]	; (8000760 <MX_GPIO_Init+0x294>)
 8000648:	f001 fa2a 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 800064c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000656:	2301      	movs	r3, #1
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800065a:	2303      	movs	r3, #3
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	483d      	ldr	r0, [pc, #244]	; (800075c <MX_GPIO_Init+0x290>)
 8000666:	f001 fa1b 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 800066a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	4838      	ldr	r0, [pc, #224]	; (8000764 <MX_GPIO_Init+0x298>)
 8000684:	f001 fa0c 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000688:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000696:	2303      	movs	r3, #3
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800069a:	230a      	movs	r3, #10
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a8:	f001 f9fa 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 80006ac:	2305      	movs	r3, #5
 80006ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006b0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4829      	ldr	r0, [pc, #164]	; (8000768 <MX_GPIO_Init+0x29c>)
 80006c2:	f001 f9ed 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 80006c6:	2380      	movs	r3, #128	; 0x80
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	4822      	ldr	r0, [pc, #136]	; (8000768 <MX_GPIO_Init+0x29c>)
 80006de:	f001 f9df 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 80006e2:	2308      	movs	r3, #8
 80006e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	4819      	ldr	r0, [pc, #100]	; (8000760 <MX_GPIO_Init+0x294>)
 80006fa:	f001 f9d1 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80006fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000704:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	4812      	ldr	r0, [pc, #72]	; (8000760 <MX_GPIO_Init+0x294>)
 8000716:	f001 f9c3 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 800071a:	2301      	movs	r3, #1
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	480a      	ldr	r0, [pc, #40]	; (800075c <MX_GPIO_Init+0x290>)
 8000732:	f001 f9b5 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000736:	2302      	movs	r3, #2
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800073a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800073e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_GPIO_Init+0x290>)
 800074c:	f001 f9a8 	bl	8001aa0 <HAL_GPIO_Init>

}
 8000750:	bf00      	nop
 8000752:	3730      	adds	r7, #48	; 0x30
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	48001000 	.word	0x48001000
 8000760:	48000400 	.word	0x48000400
 8000764:	48000800 	.word	0x48000800
 8000768:	48000c00 	.word	0x48000c00

0800076c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_I2C1_Init+0x74>)
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <MX_I2C1_Init+0x78>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_I2C1_Init+0x74>)
 8000778:	4a1b      	ldr	r2, [pc, #108]	; (80007e8 <MX_I2C1_Init+0x7c>)
 800077a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_I2C1_Init+0x74>)
 8000784:	2201      	movs	r2, #1
 8000786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_I2C1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a6:	480e      	ldr	r0, [pc, #56]	; (80007e0 <MX_I2C1_Init+0x74>)
 80007a8:	f001 fb3c 	bl	8001e24 <HAL_I2C_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007b2:	f000 fad1 	bl	8000d58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007b6:	2100      	movs	r1, #0
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <MX_I2C1_Init+0x74>)
 80007ba:	f001 fbc2 	bl	8001f42 <HAL_I2CEx_ConfigAnalogFilter>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007c4:	f000 fac8 	bl	8000d58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_I2C1_Init+0x74>)
 80007cc:	f001 fc04 	bl	8001fd8 <HAL_I2CEx_ConfigDigitalFilter>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 fabf 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000028 	.word	0x20000028
 80007e4:	40005400 	.word	0x40005400
 80007e8:	10909cec 	.word	0x10909cec

080007ec <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_I2C2_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <MX_I2C2_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_I2C2_Init+0x74>)
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <MX_I2C2_Init+0x7c>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_I2C2_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_I2C2_Init+0x74>)
 8000804:	2201      	movs	r2, #1
 8000806:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_I2C2_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_I2C2_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_I2C2_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_I2C2_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_I2C2_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000826:	480e      	ldr	r0, [pc, #56]	; (8000860 <MX_I2C2_Init+0x74>)
 8000828:	f001 fafc 	bl	8001e24 <HAL_I2C_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000832:	f000 fa91 	bl	8000d58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	4809      	ldr	r0, [pc, #36]	; (8000860 <MX_I2C2_Init+0x74>)
 800083a:	f001 fb82 	bl	8001f42 <HAL_I2CEx_ConfigAnalogFilter>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000844:	f000 fa88 	bl	8000d58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_I2C2_Init+0x74>)
 800084c:	f001 fbc4 	bl	8001fd8 <HAL_I2CEx_ConfigDigitalFilter>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 fa7f 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000074 	.word	0x20000074
 8000864:	40005800 	.word	0x40005800
 8000868:	10909cec 	.word	0x10909cec

0800086c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b0ae      	sub	sp, #184	; 0xb8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	2288      	movs	r2, #136	; 0x88
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f005 f9d3 	bl	8005c38 <memset>
  if(i2cHandle->Instance==I2C1)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a42      	ldr	r2, [pc, #264]	; (80009a0 <HAL_I2C_MspInit+0x134>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d13b      	bne.n	8000914 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800089c:	2340      	movs	r3, #64	; 0x40
 800089e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 fd2b 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008b4:	f000 fa50 	bl	8000d58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b8:	4b3a      	ldr	r3, [pc, #232]	; (80009a4 <HAL_I2C_MspInit+0x138>)
 80008ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008bc:	4a39      	ldr	r2, [pc, #228]	; (80009a4 <HAL_I2C_MspInit+0x138>)
 80008be:	f043 0302 	orr.w	r3, r3, #2
 80008c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c4:	4b37      	ldr	r3, [pc, #220]	; (80009a4 <HAL_I2C_MspInit+0x138>)
 80008c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c8:	f003 0302 	and.w	r3, r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
 80008ce:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80008d0:	23c0      	movs	r3, #192	; 0xc0
 80008d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d6:	2312      	movs	r3, #18
 80008d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008dc:	2301      	movs	r3, #1
 80008de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e8:	2304      	movs	r3, #4
 80008ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008f2:	4619      	mov	r1, r3
 80008f4:	482c      	ldr	r0, [pc, #176]	; (80009a8 <HAL_I2C_MspInit+0x13c>)
 80008f6:	f001 f8d3 	bl	8001aa0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <HAL_I2C_MspInit+0x138>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	4a29      	ldr	r2, [pc, #164]	; (80009a4 <HAL_I2C_MspInit+0x138>)
 8000900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000904:	6593      	str	r3, [r2, #88]	; 0x58
 8000906:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <HAL_I2C_MspInit+0x138>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000912:	e040      	b.n	8000996 <HAL_I2C_MspInit+0x12a>
  else if(i2cHandle->Instance==I2C2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a24      	ldr	r2, [pc, #144]	; (80009ac <HAL_I2C_MspInit+0x140>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d13b      	bne.n	8000996 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000922:	2300      	movs	r3, #0
 8000924:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4618      	mov	r0, r3
 800092c:	f002 fcea 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000936:	f000 fa0f 	bl	8000d58 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <HAL_I2C_MspInit+0x138>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <HAL_I2C_MspInit+0x138>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_I2C_MspInit+0x138>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000952:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095a:	2312      	movs	r3, #18
 800095c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000960:	2301      	movs	r3, #1
 8000962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800096c:	2304      	movs	r3, #4
 800096e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000976:	4619      	mov	r1, r3
 8000978:	480b      	ldr	r0, [pc, #44]	; (80009a8 <HAL_I2C_MspInit+0x13c>)
 800097a:	f001 f891 	bl	8001aa0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_I2C_MspInit+0x138>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_I2C_MspInit+0x138>)
 8000984:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000988:	6593      	str	r3, [r2, #88]	; 0x58
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_I2C_MspInit+0x138>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
}
 8000996:	bf00      	nop
 8000998:	37b8      	adds	r7, #184	; 0xb8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40005400 	.word	0x40005400
 80009a4:	40021000 	.word	0x40021000
 80009a8:	48000400 	.word	0x48000400
 80009ac:	40005800 	.word	0x40005800

080009b0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_IWDG_Init+0x34>)
 80009b6:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <MX_IWDG_Init+0x38>)
 80009b8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_IWDG_Init+0x34>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_IWDG_Init+0x34>)
 80009c2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80009c6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_IWDG_Init+0x34>)
 80009ca:	f640 72ff 	movw	r2, #4095	; 0xfff
 80009ce:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_IWDG_Init+0x34>)
 80009d2:	f001 fb4d 	bl	8002070 <HAL_IWDG_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80009dc:	f000 f9bc 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000c0 	.word	0x200000c0
 80009e8:	40003000 	.word	0x40003000

080009ec <HAL_LCD_MspInit>:
  /* USER CODE END LCD_Init 2 */

}

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b0ae      	sub	sp, #184	; 0xb8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	2288      	movs	r2, #136	; 0x88
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f005 f913 	bl	8005c38 <memset>
  if(lcdHandle->Instance==LCD)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a57      	ldr	r2, [pc, #348]	; (8000b74 <HAL_LCD_MspInit+0x188>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	f040 80a6 	bne.w	8000b6a <HAL_LCD_MspInit+0x17e>

  /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a22:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 fc67 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 8000a3c:	f000 f98c 	bl	8000d58 <Error_Handler>
    }

    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000a40:	4b4d      	ldr	r3, [pc, #308]	; (8000b78 <HAL_LCD_MspInit+0x18c>)
 8000a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a44:	4a4c      	ldr	r2, [pc, #304]	; (8000b78 <HAL_LCD_MspInit+0x18c>)
 8000a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4c:	4b4a      	ldr	r3, [pc, #296]	; (8000b78 <HAL_LCD_MspInit+0x18c>)
 8000a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a58:	4b47      	ldr	r3, [pc, #284]	; (8000b78 <HAL_LCD_MspInit+0x18c>)
 8000a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5c:	4a46      	ldr	r2, [pc, #280]	; (8000b78 <HAL_LCD_MspInit+0x18c>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a64:	4b44      	ldr	r3, [pc, #272]	; (8000b78 <HAL_LCD_MspInit+0x18c>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a68:	f003 0304 	and.w	r3, r3, #4
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	4b41      	ldr	r3, [pc, #260]	; (8000b78 <HAL_LCD_MspInit+0x18c>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a74:	4a40      	ldr	r2, [pc, #256]	; (8000b78 <HAL_LCD_MspInit+0x18c>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7c:	4b3e      	ldr	r3, [pc, #248]	; (8000b78 <HAL_LCD_MspInit+0x18c>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a88:	4b3b      	ldr	r3, [pc, #236]	; (8000b78 <HAL_LCD_MspInit+0x18c>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8c:	4a3a      	ldr	r2, [pc, #232]	; (8000b78 <HAL_LCD_MspInit+0x18c>)
 8000a8e:	f043 0302 	orr.w	r3, r3, #2
 8000a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a94:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <HAL_LCD_MspInit+0x18c>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa0:	4b35      	ldr	r3, [pc, #212]	; (8000b78 <HAL_LCD_MspInit+0x18c>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa4:	4a34      	ldr	r2, [pc, #208]	; (8000b78 <HAL_LCD_MspInit+0x18c>)
 8000aa6:	f043 0308 	orr.w	r3, r3, #8
 8000aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aac:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <HAL_LCD_MspInit+0x18c>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab0:	f003 0308 	and.w	r3, r3, #8
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8000ab8:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000abc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000ad2:	230b      	movs	r3, #11
 8000ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4827      	ldr	r0, [pc, #156]	; (8000b7c <HAL_LCD_MspInit+0x190>)
 8000ae0:	f000 ffde 	bl	8001aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8000ae4:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000afe:	230b      	movs	r3, #11
 8000b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0e:	f000 ffc7 	bl	8001aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 8000b12:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b2c:	230b      	movs	r3, #11
 8000b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b36:	4619      	mov	r1, r3
 8000b38:	4811      	ldr	r0, [pc, #68]	; (8000b80 <HAL_LCD_MspInit+0x194>)
 8000b3a:	f000 ffb1 	bl	8001aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8000b3e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000b42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b58:	230b      	movs	r3, #11
 8000b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b62:	4619      	mov	r1, r3
 8000b64:	4807      	ldr	r0, [pc, #28]	; (8000b84 <HAL_LCD_MspInit+0x198>)
 8000b66:	f000 ff9b 	bl	8001aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	37b8      	adds	r7, #184	; 0xb8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40002400 	.word	0x40002400
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	48000800 	.word	0x48000800
 8000b80:	48000400 	.word	0x48000400
 8000b84:	48000c00 	.word	0x48000c00

08000b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8e:	f000 fe01 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b92:	f000 f855 	bl	8000c40 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b96:	f000 f8b5 	bl	8000d04 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9a:	f7ff fc97 	bl	80004cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b9e:	f7ff fde5 	bl	800076c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ba2:	f7ff fe23 	bl	80007ec <MX_I2C2_Init>
//  MX_LCD_Init();
  MX_QUADSPI_Init();
 8000ba6:	f000 f8dd 	bl	8000d64 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000baa:	f000 f9d3 	bl	8000f54 <MX_SAI1_Init>
  MX_SPI2_Init();
 8000bae:	f000 faf1 	bl	8001194 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000bb2:	f000 fd37 	bl	8001624 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000bb6:	f000 f93f 	bl	8000e38 <MX_RTC_Init>
  MX_IWDG_Init();
 8000bba:	f7ff fef9 	bl	80009b0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_GLASS_Init();
 8000bbe:	f000 fb6b 	bl	8001298 <BSP_LCD_GLASS_Init>
  BSP_LCD_GLASS_Clear();
 8000bc2:	f000 fbff 	bl	80013c4 <BSP_LCD_GLASS_Clear>

  uint32_t last_ms=HAL_GetTick();
 8000bc6:	f000 fe55 	bl	8001874 <HAL_GetTick>
 8000bca:	60f8      	str	r0, [r7, #12]
  uint32_t now=last_ms;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	607b      	str	r3, [r7, #4]
  uint32_t delay_500ms=500;
 8000bd0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bd4:	603b      	str	r3, [r7, #0]
  int i=0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  now = HAL_GetTick();
 8000bda:	f000 fe4b 	bl	8001874 <HAL_GetTick>
 8000bde:	6078      	str	r0, [r7, #4]

	  //LCD bar demo starts
	  if(i==0){
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d105      	bne.n	8000bf2 <main+0x6a>
		  BSP_LCD_GLASS_Clear();
 8000be6:	f000 fbed 	bl	80013c4 <BSP_LCD_GLASS_Clear>
		  BSP_LCD_GLASS_DisplayBar(i);
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fb8d 	bl	800130c <BSP_LCD_GLASS_DisplayBar>
	  }

	  if (now - last_ms >= 2*delay_500ms){
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	1ad2      	subs	r2, r2, r3
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d311      	bcc.n	8000c24 <main+0x9c>
		  if(i==0){
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d103      	bne.n	8000c0e <main+0x86>
			  i+=1;
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	e002      	b.n	8000c14 <main+0x8c>
		  }
		  else{
			  i=i<<1;
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
		  }
		  BSP_LCD_GLASS_Clear();
 8000c14:	f000 fbd6 	bl	80013c4 <BSP_LCD_GLASS_Clear>
		  BSP_LCD_GLASS_DisplayBar(i);
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fb76 	bl	800130c <BSP_LCD_GLASS_DisplayBar>
		  last_ms = now;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	60fb      	str	r3, [r7, #12]
	  }

	  if(i>LCD_BAR_3){
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	2b08      	cmp	r3, #8
 8000c28:	dd03      	ble.n	8000c32 <main+0xaa>
		  i=0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
		  BSP_LCD_GLASS_Clear();
 8000c2e:	f000 fbc9 	bl	80013c4 <BSP_LCD_GLASS_Clear>
	  }
	  //LCD bar demo ends


	  HAL_IWDG_Refresh(&hiwdg);
 8000c32:	4802      	ldr	r0, [pc, #8]	; (8000c3c <main+0xb4>)
 8000c34:	f001 fa6b 	bl	800210e <HAL_IWDG_Refresh>
	  now = HAL_GetTick();
 8000c38:	e7cf      	b.n	8000bda <main+0x52>
 8000c3a:	bf00      	nop
 8000c3c:	200000c0 	.word	0x200000c0

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b096      	sub	sp, #88	; 0x58
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	2244      	movs	r2, #68	; 0x44
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f004 fff2 	bl	8005c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	463b      	mov	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c66:	f001 fc4d 	bl	8002504 <HAL_PWREx_ControlVoltageScaling>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c70:	f000 f872 	bl	8000d58 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c74:	f001 fc28 	bl	80024c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <SystemClock_Config+0xc0>)
 8000c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c7e:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <SystemClock_Config+0xc0>)
 8000c80:	f023 0318 	bic.w	r3, r3, #24
 8000c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000c88:	230e      	movs	r3, #14
 8000c8a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c96:	2310      	movs	r3, #16
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000caa:	230a      	movs	r3, #10
 8000cac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 fd32 	bl	8002728 <HAL_RCC_OscConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000cca:	f000 f845 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cce:	230f      	movs	r3, #15
 8000cd0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2104      	movs	r1, #4
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f002 f906 	bl	8002ef8 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000cf2:	f000 f831 	bl	8000d58 <Error_Handler>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3758      	adds	r7, #88	; 0x58
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0a2      	sub	sp, #136	; 0x88
 8000d08:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	2288      	movs	r2, #136	; 0x88
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 ff91 	bl	8005c38 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000d16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d1a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000d20:	2302      	movs	r3, #2
 8000d22:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4618      	mov	r0, r3
 8000d42:	f002 fadf 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8000d4c:	f000 f804 	bl	8000d58 <Error_Handler>
  }
}
 8000d50:	bf00      	nop
 8000d52:	3788      	adds	r7, #136	; 0x88
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_QUADSPI_Init+0x44>)
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <MX_QUADSPI_Init+0x48>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_QUADSPI_Init+0x44>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_QUADSPI_Init+0x44>)
 8000d76:	2204      	movs	r2, #4
 8000d78:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <MX_QUADSPI_Init+0x44>)
 8000d7c:	2210      	movs	r2, #16
 8000d7e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_QUADSPI_Init+0x44>)
 8000d82:	2218      	movs	r2, #24
 8000d84:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <MX_QUADSPI_Init+0x44>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_QUADSPI_Init+0x44>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_QUADSPI_Init+0x44>)
 8000d94:	f001 fc0c 	bl	80025b0 <HAL_QSPI_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000d9e:	f7ff ffdb 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000d0 	.word	0x200000d0
 8000dac:	a0001000 	.word	0xa0001000

08000db0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <HAL_QSPI_MspInit+0x7c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d128      	bne.n	8000e24 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_QSPI_MspInit+0x80>)
 8000dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dd6:	4a16      	ldr	r2, [pc, #88]	; (8000e30 <HAL_QSPI_MspInit+0x80>)
 8000dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ddc:	6513      	str	r3, [r2, #80]	; 0x50
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_QSPI_MspInit+0x80>)
 8000de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_QSPI_MspInit+0x80>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <HAL_QSPI_MspInit+0x80>)
 8000df0:	f043 0310 	orr.w	r3, r3, #16
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_QSPI_MspInit+0x80>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0310 	and.w	r3, r3, #16
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8000e02:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e06:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e14:	230a      	movs	r3, #10
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <HAL_QSPI_MspInit+0x84>)
 8000e20:	f000 fe3e 	bl	8001aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	; 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	a0001000 	.word	0xa0001000
 8000e30:	40021000 	.word	0x40021000
 8000e34:	48001000 	.word	0x48001000

08000e38 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e50:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <MX_RTC_Init+0xb0>)
 8000e52:	4a26      	ldr	r2, [pc, #152]	; (8000eec <MX_RTC_Init+0xb4>)
 8000e54:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e56:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <MX_RTC_Init+0xb0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e5c:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <MX_RTC_Init+0xb0>)
 8000e5e:	227f      	movs	r2, #127	; 0x7f
 8000e60:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <MX_RTC_Init+0xb0>)
 8000e64:	22ff      	movs	r2, #255	; 0xff
 8000e66:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <MX_RTC_Init+0xb0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <MX_RTC_Init+0xb0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <MX_RTC_Init+0xb0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <MX_RTC_Init+0xb0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e80:	4819      	ldr	r0, [pc, #100]	; (8000ee8 <MX_RTC_Init+0xb0>)
 8000e82:	f003 fd59 	bl	8004938 <HAL_RTC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000e8c:	f7ff ff64 	bl	8000d58 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <MX_RTC_Init+0xb0>)
 8000eac:	f003 fdbf 	bl	8004a2e <HAL_RTC_SetTime>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000eb6:	f7ff ff4f 	bl	8000d58 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000eba:	2306      	movs	r3, #6
 8000ebc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x19;
 8000ec2:	2319      	movs	r3, #25
 8000ec4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8000ec6:	2322      	movs	r3, #34	; 0x22
 8000ec8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_RTC_Init+0xb0>)
 8000ed2:	f003 fe49 	bl	8004b68 <HAL_RTC_SetDate>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000edc:	f7ff ff3c 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000114 	.word	0x20000114
 8000eec:	40002800 	.word	0x40002800

08000ef0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0a4      	sub	sp, #144	; 0x90
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	2288      	movs	r2, #136	; 0x88
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f004 fe99 	bl	8005c38 <memset>
  if(rtcHandle->Instance==RTC)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <HAL_RTC_MspInit+0x5c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d118      	bne.n	8000f42 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 f9ee 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000f2e:	f7ff ff13 	bl	8000d58 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_RTC_MspInit+0x60>)
 8000f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f38:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <HAL_RTC_MspInit+0x60>)
 8000f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3790      	adds	r7, #144	; 0x90
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40002800 	.word	0x40002800
 8000f50:	40021000 	.word	0x40021000

08000f54 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000f58:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000f5a:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <MX_SAI1_Init+0x140>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f5e:	4b4c      	ldr	r3, [pc, #304]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f64:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000f6a:	4b49      	ldr	r3, [pc, #292]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000f6c:	2240      	movs	r2, #64	; 0x40
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f70:	4b47      	ldr	r3, [pc, #284]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f76:	4b46      	ldr	r3, [pc, #280]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f7c:	4b44      	ldr	r3, [pc, #272]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f82:	4b43      	ldr	r3, [pc, #268]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f88:	4b41      	ldr	r3, [pc, #260]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f8e:	4b40      	ldr	r3, [pc, #256]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000f94:	4b3e      	ldr	r3, [pc, #248]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000f96:	4a40      	ldr	r2, [pc, #256]	; (8001098 <MX_SAI1_Init+0x144>)
 8000f98:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000fa6:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000fac:	4b38      	ldr	r3, [pc, #224]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000fb2:	4b37      	ldr	r3, [pc, #220]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000fb8:	4b35      	ldr	r3, [pc, #212]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000fbe:	4b34      	ldr	r3, [pc, #208]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000fc4:	4b32      	ldr	r3, [pc, #200]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000fca:	4b31      	ldr	r3, [pc, #196]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000fe8:	4829      	ldr	r0, [pc, #164]	; (8001090 <MX_SAI1_Init+0x13c>)
 8000fea:	f003 fefb 	bl	8004de4 <HAL_SAI_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000ff4:	f7ff feb0 	bl	8000d58 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <MX_SAI1_Init+0x148>)
 8000ffa:	4a29      	ldr	r2, [pc, #164]	; (80010a0 <MX_SAI1_Init+0x14c>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <MX_SAI1_Init+0x148>)
 8001000:	2200      	movs	r2, #0
 8001002:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <MX_SAI1_Init+0x148>)
 8001006:	2203      	movs	r2, #3
 8001008:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <MX_SAI1_Init+0x148>)
 800100c:	2240      	movs	r2, #64	; 0x40
 800100e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <MX_SAI1_Init+0x148>)
 8001012:	2200      	movs	r2, #0
 8001014:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <MX_SAI1_Init+0x148>)
 8001018:	2200      	movs	r2, #0
 800101a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <MX_SAI1_Init+0x148>)
 800101e:	2201      	movs	r2, #1
 8001020:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <MX_SAI1_Init+0x148>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <MX_SAI1_Init+0x148>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_SAI1_Init+0x148>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <MX_SAI1_Init+0x148>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_SAI1_Init+0x148>)
 800103c:	2200      	movs	r2, #0
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_SAI1_Init+0x148>)
 8001042:	2200      	movs	r2, #0
 8001044:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_SAI1_Init+0x148>)
 8001048:	2208      	movs	r2, #8
 800104a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_SAI1_Init+0x148>)
 800104e:	2201      	movs	r2, #1
 8001050:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_SAI1_Init+0x148>)
 8001054:	2200      	movs	r2, #0
 8001056:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <MX_SAI1_Init+0x148>)
 800105a:	2200      	movs	r2, #0
 800105c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_SAI1_Init+0x148>)
 8001060:	2200      	movs	r2, #0
 8001062:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <MX_SAI1_Init+0x148>)
 8001066:	2200      	movs	r2, #0
 8001068:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_SAI1_Init+0x148>)
 800106c:	2200      	movs	r2, #0
 800106e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <MX_SAI1_Init+0x148>)
 8001072:	2201      	movs	r2, #1
 8001074:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_SAI1_Init+0x148>)
 8001078:	2200      	movs	r2, #0
 800107a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <MX_SAI1_Init+0x148>)
 800107e:	f003 feb1 	bl	8004de4 <HAL_SAI_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001088:	f7ff fe66 	bl	8000d58 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000138 	.word	0x20000138
 8001094:	40015404 	.word	0x40015404
 8001098:	0002ee00 	.word	0x0002ee00
 800109c:	200001bc 	.word	0x200001bc
 80010a0:	40015424 	.word	0x40015424

080010a4 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a33      	ldr	r2, [pc, #204]	; (8001180 <HAL_SAI_MspInit+0xdc>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d135      	bne.n	8001122 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80010b6:	4b33      	ldr	r3, [pc, #204]	; (8001184 <HAL_SAI_MspInit+0xe0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10b      	bne.n	80010d6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80010be:	4b32      	ldr	r3, [pc, #200]	; (8001188 <HAL_SAI_MspInit+0xe4>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c2:	4a31      	ldr	r2, [pc, #196]	; (8001188 <HAL_SAI_MspInit+0xe4>)
 80010c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ca:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <HAL_SAI_MspInit+0xe4>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80010d6:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <HAL_SAI_MspInit+0xe0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	4a29      	ldr	r2, [pc, #164]	; (8001184 <HAL_SAI_MspInit+0xe0>)
 80010de:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 80010e0:	2374      	movs	r3, #116	; 0x74
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80010f0:	230d      	movs	r3, #13
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4824      	ldr	r0, [pc, #144]	; (800118c <HAL_SAI_MspInit+0xe8>)
 80010fc:	f000 fcd0 	bl	8001aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8001100:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001112:	230d      	movs	r3, #13
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	481b      	ldr	r0, [pc, #108]	; (800118c <HAL_SAI_MspInit+0xe8>)
 800111e:	f000 fcbf 	bl	8001aa0 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a1a      	ldr	r2, [pc, #104]	; (8001190 <HAL_SAI_MspInit+0xec>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d124      	bne.n	8001176 <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_SAI_MspInit+0xe0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10b      	bne.n	800114c <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_SAI_MspInit+0xe4>)
 8001136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001138:	4a13      	ldr	r2, [pc, #76]	; (8001188 <HAL_SAI_MspInit+0xe4>)
 800113a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800113e:	6613      	str	r3, [r2, #96]	; 0x60
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_SAI_MspInit+0xe4>)
 8001142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_SAI_MspInit+0xe0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <HAL_SAI_MspInit+0xe0>)
 8001154:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001166:	230d      	movs	r3, #13
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4806      	ldr	r0, [pc, #24]	; (800118c <HAL_SAI_MspInit+0xe8>)
 8001172:	f000 fc95 	bl	8001aa0 <HAL_GPIO_Init>

    }
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40015404 	.word	0x40015404
 8001184:	20000240 	.word	0x20000240
 8001188:	40021000 	.word	0x40021000
 800118c:	48001000 	.word	0x48001000
 8001190:	40015424 	.word	0x40015424

08001194 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_SPI2_Init+0x74>)
 800119a:	4a1c      	ldr	r2, [pc, #112]	; (800120c <MX_SPI2_Init+0x78>)
 800119c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_SPI2_Init+0x74>)
 80011a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_SPI2_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_SPI2_Init+0x74>)
 80011ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_SPI2_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <MX_SPI2_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_SPI2_Init+0x74>)
 80011c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_SPI2_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_SPI2_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_SPI2_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_SPI2_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_SPI2_Init+0x74>)
 80011e2:	2207      	movs	r2, #7
 80011e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_SPI2_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_SPI2_Init+0x74>)
 80011ee:	2208      	movs	r2, #8
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_SPI2_Init+0x74>)
 80011f4:	f003 ffa2 	bl	800513c <HAL_SPI_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011fe:	f7ff fdab 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000244 	.word	0x20000244
 800120c:	40003800 	.word	0x40003800

08001210 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a17      	ldr	r2, [pc, #92]	; (800128c <HAL_SPI_MspInit+0x7c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d127      	bne.n	8001282 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_SPI_MspInit+0x80>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <HAL_SPI_MspInit+0x80>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	6593      	str	r3, [r2, #88]	; 0x58
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_SPI_MspInit+0x80>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_SPI_MspInit+0x80>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a10      	ldr	r2, [pc, #64]	; (8001290 <HAL_SPI_MspInit+0x80>)
 8001250:	f043 0308 	orr.w	r3, r3, #8
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_SPI_MspInit+0x80>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001262:	231a      	movs	r3, #26
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001272:	2305      	movs	r3, #5
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <HAL_SPI_MspInit+0x84>)
 800127e:	f000 fc0f 	bl	8001aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40003800 	.word	0x40003800
 8001290:	40021000 	.word	0x40021000
 8001294:	48000c00 	.word	0x48000c00

08001298 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <BSP_LCD_GLASS_Init+0x6c>)
 800129e:	4a1a      	ldr	r2, [pc, #104]	; (8001308 <BSP_LCD_GLASS_Init+0x70>)
 80012a0:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <BSP_LCD_GLASS_Init+0x6c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <BSP_LCD_GLASS_Init+0x6c>)
 80012aa:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80012ae:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <BSP_LCD_GLASS_Init+0x6c>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <BSP_LCD_GLASS_Init+0x6c>)
 80012b8:	2240      	movs	r2, #64	; 0x40
 80012ba:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <BSP_LCD_GLASS_Init+0x6c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <BSP_LCD_GLASS_Init+0x6c>)
 80012c4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80012c8:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <BSP_LCD_GLASS_Init+0x6c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <BSP_LCD_GLASS_Init+0x6c>)
 80012d2:	2240      	movs	r2, #64	; 0x40
 80012d4:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <BSP_LCD_GLASS_Init+0x6c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <BSP_LCD_GLASS_Init+0x6c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <BSP_LCD_GLASS_Init+0x6c>)
 80012e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <BSP_LCD_GLASS_Init+0x6c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <BSP_LCD_GLASS_Init+0x6c>)
 80012f2:	f000 f871 	bl	80013d8 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 80012f6:	4803      	ldr	r0, [pc, #12]	; (8001304 <BSP_LCD_GLASS_Init+0x6c>)
 80012f8:	f000 ff1a 	bl	8002130 <HAL_LCD_Init>

  BSP_LCD_GLASS_Clear();
 80012fc:	f000 f862 	bl	80013c4 <BSP_LCD_GLASS_Clear>
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200002a8 	.word	0x200002a8
 8001308:	40002400 	.word	0x40002400

0800130c <BSP_LCD_GLASS_DisplayBar>:
  *     @arg BAR0: LCD GLASS Bar 2
  *     @arg BAR0: LCD GLASS Bar 3
  * @retval None
  */
void BSP_LCD_GLASS_DisplayBar(uint32_t BarId)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t position = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]

  /* Check which bar is selected */
  while ((BarId) >> position)
 8001318:	e044      	b.n	80013a4 <BSP_LCD_GLASS_DisplayBar+0x98>
  {
    /* Check if current bar is selected */
    switch (BarId & (1 << position))
 800131a:	2201      	movs	r2, #1
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	461a      	mov	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4013      	ands	r3, r2
 8001328:	3b01      	subs	r3, #1
 800132a:	2b07      	cmp	r3, #7
 800132c:	d836      	bhi.n	800139c <BSP_LCD_GLASS_DisplayBar+0x90>
 800132e:	a201      	add	r2, pc, #4	; (adr r2, 8001334 <BSP_LCD_GLASS_DisplayBar+0x28>)
 8001330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001334:	08001355 	.word	0x08001355
 8001338:	08001367 	.word	0x08001367
 800133c:	0800139d 	.word	0x0800139d
 8001340:	08001379 	.word	0x08001379
 8001344:	0800139d 	.word	0x0800139d
 8001348:	0800139d 	.word	0x0800139d
 800134c:	0800139d 	.word	0x0800139d
 8001350:	0800138b 	.word	0x0800138b
    {
        /* Bar 0 */
      case LCD_BAR_0:
        /* Set BAR0 */
        HAL_LCD_Write(&LCDHandle, LCD_BAR0_2_COM, ~(LCD_BAR0_SEG), LCD_BAR0_SEG);
 8001354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001358:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800135c:	2106      	movs	r1, #6
 800135e:	4818      	ldr	r0, [pc, #96]	; (80013c0 <BSP_LCD_GLASS_DisplayBar+0xb4>)
 8001360:	f000 ffa6 	bl	80022b0 <HAL_LCD_Write>
        break;
 8001364:	e01b      	b.n	800139e <BSP_LCD_GLASS_DisplayBar+0x92>

        /* Bar 1 */
      case LCD_BAR_1:
        /* Set BAR1 */
        HAL_LCD_Write(&LCDHandle, LCD_BAR1_3_COM, ~(LCD_BAR1_SEG), LCD_BAR1_SEG);
 8001366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800136a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800136e:	2104      	movs	r1, #4
 8001370:	4813      	ldr	r0, [pc, #76]	; (80013c0 <BSP_LCD_GLASS_DisplayBar+0xb4>)
 8001372:	f000 ff9d 	bl	80022b0 <HAL_LCD_Write>
        break;
 8001376:	e012      	b.n	800139e <BSP_LCD_GLASS_DisplayBar+0x92>

        /* Bar 2 */
      case LCD_BAR_2:
        /* Set BAR2 */
        HAL_LCD_Write(&LCDHandle, LCD_BAR0_2_COM, ~(LCD_BAR2_SEG), LCD_BAR2_SEG);
 8001378:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800137c:	f06f 7200 	mvn.w	r2, #33554432	; 0x2000000
 8001380:	2106      	movs	r1, #6
 8001382:	480f      	ldr	r0, [pc, #60]	; (80013c0 <BSP_LCD_GLASS_DisplayBar+0xb4>)
 8001384:	f000 ff94 	bl	80022b0 <HAL_LCD_Write>
        break;
 8001388:	e009      	b.n	800139e <BSP_LCD_GLASS_DisplayBar+0x92>

        /* Bar 3 */
      case LCD_BAR_3:
        /* Set BAR3 */
        HAL_LCD_Write(&LCDHandle, LCD_BAR1_3_COM, ~(LCD_BAR3_SEG), LCD_BAR3_SEG);
 800138a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800138e:	f06f 7200 	mvn.w	r2, #33554432	; 0x2000000
 8001392:	2104      	movs	r1, #4
 8001394:	480a      	ldr	r0, [pc, #40]	; (80013c0 <BSP_LCD_GLASS_DisplayBar+0xb4>)
 8001396:	f000 ff8b 	bl	80022b0 <HAL_LCD_Write>
        break;
 800139a:	e000      	b.n	800139e <BSP_LCD_GLASS_DisplayBar+0x92>

      default:
        break;
 800139c:	bf00      	nop
    }
    position++;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3301      	adds	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
  while ((BarId) >> position)
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	fa22 f303 	lsr.w	r3, r2, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1b4      	bne.n	800131a <BSP_LCD_GLASS_DisplayBar+0xe>
  }

  /* Update the LCD display */
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <BSP_LCD_GLASS_DisplayBar+0xb4>)
 80013b2:	f001 f82e 	bl	8002412 <HAL_LCD_UpdateDisplayRequest>
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200002a8 	.word	0x200002a8

080013c4 <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <BSP_LCD_GLASS_Clear+0x10>)
 80013ca:	f000 ffcc 	bl	8002366 <HAL_LCD_Clear>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200002a8 	.word	0x200002a8

080013d8 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0c0      	sub	sp, #256	; 0x100
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80013e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 80013f0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80013f4:	2244      	movs	r2, #68	; 0x44
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f004 fc1d 	bl	8005c38 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2288      	movs	r2, #136	; 0x88
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f004 fc16 	bl	8005c38 <memset>

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 800140c:	4b51      	ldr	r3, [pc, #324]	; (8001554 <LCD_MspInit+0x17c>)
 800140e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001410:	4a50      	ldr	r2, [pc, #320]	; (8001554 <LCD_MspInit+0x17c>)
 8001412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001416:	6593      	str	r3, [r2, #88]	; 0x58
 8001418:	4b4e      	ldr	r3, [pc, #312]	; (8001554 <LCD_MspInit+0x17c>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	69fb      	ldr	r3, [r7, #28]

  /*##-2- Configure LSE as RTC clock source ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8001424:	2304      	movs	r3, #4
 8001426:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8001430:	2301      	movs	r3, #1
 8001432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8001436:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800143a:	4618      	mov	r0, r3
 800143c:	f001 f974 	bl	8002728 <HAL_RCC_OscConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d000      	beq.n	8001448 <LCD_MspInit+0x70>
  {
    while (1);
 8001446:	e7fe      	b.n	8001446 <LCD_MspInit+0x6e>
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800144c:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800144e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8001456:	f107 0320 	add.w	r3, r7, #32
 800145a:	4618      	mov	r0, r3
 800145c:	f001 ff52 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	4b3c      	ldr	r3, [pc, #240]	; (8001554 <LCD_MspInit+0x17c>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	4a3b      	ldr	r2, [pc, #236]	; (8001554 <LCD_MspInit+0x17c>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146c:	4b39      	ldr	r3, [pc, #228]	; (8001554 <LCD_MspInit+0x17c>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4b36      	ldr	r3, [pc, #216]	; (8001554 <LCD_MspInit+0x17c>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	4a35      	ldr	r2, [pc, #212]	; (8001554 <LCD_MspInit+0x17c>)
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001484:	4b33      	ldr	r3, [pc, #204]	; (8001554 <LCD_MspInit+0x17c>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001490:	4b30      	ldr	r3, [pc, #192]	; (8001554 <LCD_MspInit+0x17c>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001494:	4a2f      	ldr	r2, [pc, #188]	; (8001554 <LCD_MspInit+0x17c>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <LCD_MspInit+0x17c>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a8:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <LCD_MspInit+0x17c>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	4a29      	ldr	r2, [pc, #164]	; (8001554 <LCD_MspInit+0x17c>)
 80014ae:	f043 0308 	orr.w	r3, r3, #8
 80014b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <LCD_MspInit+0x17c>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]


  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 80014c0:	f248 73c0 	movw	r3, #34752	; 0x87c0
 80014c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 80014da:	230b      	movs	r3, #11
 80014dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 80014e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014e4:	4619      	mov	r1, r3
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ea:	f000 fad9 	bl	8001aa0 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 80014ee:	f24f 2333 	movw	r3, #62003	; 0xf233
 80014f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 80014f6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014fa:	4619      	mov	r1, r3
 80014fc:	4816      	ldr	r0, [pc, #88]	; (8001558 <LCD_MspInit+0x180>)
 80014fe:	f000 facf 	bl	8001aa0 <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8001502:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001506:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800150a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800150e:	4619      	mov	r1, r3
 8001510:	4812      	ldr	r0, [pc, #72]	; (800155c <LCD_MspInit+0x184>)
 8001512:	f000 fac5 	bl	8001aa0 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 8001516:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800151a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 800151e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001522:	4619      	mov	r1, r3
 8001524:	480e      	ldr	r0, [pc, #56]	; (8001560 <LCD_MspInit+0x188>)
 8001526:	f000 fabb 	bl	8001aa0 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 800152a:	2002      	movs	r0, #2
 800152c:	f000 f9ae 	bl	800188c <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <LCD_MspInit+0x17c>)
 8001532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <LCD_MspInit+0x17c>)
 8001536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153a:	6593      	str	r3, [r2, #88]	; 0x58
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <LCD_MspInit+0x17c>)
 800153e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
}
 8001548:	bf00      	nop
 800154a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	48000400 	.word	0x48000400
 800155c:	48000800 	.word	0x48000800
 8001560:	48000c00 	.word	0x48000c00

08001564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_MspInit+0x44>)
 800156c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_MspInit+0x44>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6613      	str	r3, [r2, #96]	; 0x60
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_MspInit+0x44>)
 8001578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_MspInit+0x44>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <HAL_MspInit+0x44>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	6593      	str	r3, [r2, #88]	; 0x58
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_MspInit+0x44>)
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <NMI_Handler+0x4>

080015b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <MemManage_Handler+0x4>

080015be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <UsageFault_Handler+0x4>

080015ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f8:	f000 f928 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <SystemInit+0x20>)
 8001606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <SystemInit+0x20>)
 800160c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_USART2_UART_Init+0x58>)
 800162a:	4a15      	ldr	r2, [pc, #84]	; (8001680 <MX_USART2_UART_Init+0x5c>)
 800162c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <MX_USART2_UART_Init+0x58>)
 8001630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_USART2_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_USART2_UART_Init+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_USART2_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_USART2_UART_Init+0x58>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_USART2_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_USART2_UART_Init+0x58>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_USART2_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_USART2_UART_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_USART2_UART_Init+0x58>)
 8001668:	f003 fe0b 	bl	8005282 <HAL_UART_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001672:	f7ff fb71 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200002e4 	.word	0x200002e4
 8001680:	40004400 	.word	0x40004400

08001684 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b0ac      	sub	sp, #176	; 0xb0
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2288      	movs	r2, #136	; 0x88
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f004 fac7 	bl	8005c38 <memset>
  if(uartHandle->Instance==USART2)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a21      	ldr	r2, [pc, #132]	; (8001734 <HAL_UART_MspInit+0xb0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d13a      	bne.n	800172a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fe1f 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016cc:	f7ff fb44 	bl	8000d58 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d0:	4b19      	ldr	r3, [pc, #100]	; (8001738 <HAL_UART_MspInit+0xb4>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	4a18      	ldr	r2, [pc, #96]	; (8001738 <HAL_UART_MspInit+0xb4>)
 80016d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016da:	6593      	str	r3, [r2, #88]	; 0x58
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <HAL_UART_MspInit+0xb4>)
 80016de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_UART_MspInit+0xb4>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ec:	4a12      	ldr	r2, [pc, #72]	; (8001738 <HAL_UART_MspInit+0xb4>)
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_UART_MspInit+0xb4>)
 80016f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001700:	2360      	movs	r3, #96	; 0x60
 8001702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170c:	2301      	movs	r3, #1
 800170e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001718:	2307      	movs	r3, #7
 800171a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <HAL_UART_MspInit+0xb8>)
 8001726:	f000 f9bb 	bl	8001aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800172a:	bf00      	nop
 800172c:	37b0      	adds	r7, #176	; 0xb0
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40004400 	.word	0x40004400
 8001738:	40021000 	.word	0x40021000
 800173c:	48000c00 	.word	0x48000c00

08001740 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001778 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001744:	f7ff ff5c 	bl	8001600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <LoopForever+0x6>)
  ldr r1, =_edata
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <LoopForever+0xa>)
  ldr r2, =_sidata
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <LoopForever+0xe>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001760:	4c0a      	ldr	r4, [pc, #40]	; (800178c <LoopForever+0x16>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176e:	f004 fa3f 	bl	8005bf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001772:	f7ff fa09 	bl	8000b88 <main>

08001776 <LoopForever>:

LoopForever:
    b LoopForever
 8001776:	e7fe      	b.n	8001776 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001778:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001784:	08005cb8 	.word	0x08005cb8
  ldr r2, =_sbss
 8001788:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800178c:	2000036c 	.word	0x2000036c

08001790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC1_2_IRQHandler>
	...

08001794 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_Init+0x3c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <HAL_Init+0x3c>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017aa:	2003      	movs	r0, #3
 80017ac:	f000 f944 	bl	8001a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b0:	2000      	movs	r0, #0
 80017b2:	f000 f80f 	bl	80017d4 <HAL_InitTick>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	e001      	b.n	80017c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017c2:	f7ff fecf 	bl	8001564 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017c6:	79fb      	ldrb	r3, [r7, #7]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40022000 	.word	0x40022000

080017d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <HAL_InitTick+0x6c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d023      	beq.n	8001830 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017e8:	4b16      	ldr	r3, [pc, #88]	; (8001844 <HAL_InitTick+0x70>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_InitTick+0x6c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f941 	bl	8001a86 <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10f      	bne.n	800182a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d809      	bhi.n	8001824 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001810:	2200      	movs	r2, #0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f000 f919 	bl	8001a4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <HAL_InitTick+0x74>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e007      	b.n	8001834 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e004      	b.n	8001834 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	e001      	b.n	8001834 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001834:	7bfb      	ldrb	r3, [r7, #15]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008
 8001844:	20000000 	.word	0x20000000
 8001848:	20000004 	.word	0x20000004

0800184c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008
 8001870:	20000368 	.word	0x20000368

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000368 	.word	0x20000368

0800188c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff ffee 	bl	8001874 <HAL_GetTick>
 8001898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d005      	beq.n	80018b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_Delay+0x44>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018b2:	bf00      	nop
 80018b4:	f7ff ffde 	bl	8001874 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8f7      	bhi.n	80018b4 <HAL_Delay+0x28>
  {
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000008 	.word	0x20000008

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	; (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	; (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	; 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a04:	d301      	bcc.n	8001a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00f      	b.n	8001a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <SysTick_Config+0x40>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a12:	210f      	movs	r1, #15
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	f7ff ff8e 	bl	8001938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <SysTick_Config+0x40>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <SysTick_Config+0x40>)
 8001a24:	2207      	movs	r2, #7
 8001a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	e000e010 	.word	0xe000e010

08001a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff47 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a60:	f7ff ff5c 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001a64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	6978      	ldr	r0, [r7, #20]
 8001a6c:	f7ff ff8e 	bl	800198c <NVIC_EncodePriority>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff5d 	bl	8001938 <__NVIC_SetPriority>
}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffb0 	bl	80019f4 <SysTick_Config>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aae:	e17f      	b.n	8001db0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	4013      	ands	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8171 	beq.w	8001daa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d005      	beq.n	8001ae0 <HAL_GPIO_Init+0x40>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d130      	bne.n	8001b42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b16:	2201      	movs	r2, #1
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f003 0201 	and.w	r2, r3, #1
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d118      	bne.n	8001b80 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b54:	2201      	movs	r2, #1
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	08db      	lsrs	r3, r3, #3
 8001b6a:	f003 0201 	and.w	r2, r3, #1
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d017      	beq.n	8001bbc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d123      	bne.n	8001c10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	08da      	lsrs	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3208      	adds	r2, #8
 8001bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	220f      	movs	r2, #15
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	08da      	lsrs	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3208      	adds	r2, #8
 8001c0a:	6939      	ldr	r1, [r7, #16]
 8001c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0203 	and.w	r2, r3, #3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80ac 	beq.w	8001daa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <HAL_GPIO_Init+0x330>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	4a5e      	ldr	r2, [pc, #376]	; (8001dd0 <HAL_GPIO_Init+0x330>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c5e:	4b5c      	ldr	r3, [pc, #368]	; (8001dd0 <HAL_GPIO_Init+0x330>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c6a:	4a5a      	ldr	r2, [pc, #360]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c94:	d025      	beq.n	8001ce2 <HAL_GPIO_Init+0x242>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4f      	ldr	r2, [pc, #316]	; (8001dd8 <HAL_GPIO_Init+0x338>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01f      	beq.n	8001cde <HAL_GPIO_Init+0x23e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4e      	ldr	r2, [pc, #312]	; (8001ddc <HAL_GPIO_Init+0x33c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d019      	beq.n	8001cda <HAL_GPIO_Init+0x23a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4d      	ldr	r2, [pc, #308]	; (8001de0 <HAL_GPIO_Init+0x340>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d013      	beq.n	8001cd6 <HAL_GPIO_Init+0x236>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4c      	ldr	r2, [pc, #304]	; (8001de4 <HAL_GPIO_Init+0x344>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_GPIO_Init+0x232>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4b      	ldr	r2, [pc, #300]	; (8001de8 <HAL_GPIO_Init+0x348>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d007      	beq.n	8001cce <HAL_GPIO_Init+0x22e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4a      	ldr	r2, [pc, #296]	; (8001dec <HAL_GPIO_Init+0x34c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d101      	bne.n	8001cca <HAL_GPIO_Init+0x22a>
 8001cc6:	2306      	movs	r3, #6
 8001cc8:	e00c      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cca:	2307      	movs	r3, #7
 8001ccc:	e00a      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cce:	2305      	movs	r3, #5
 8001cd0:	e008      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e004      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e002      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	f002 0203 	and.w	r2, r2, #3
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	4093      	lsls	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf4:	4937      	ldr	r1, [pc, #220]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d02:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d26:	4a32      	ldr	r2, [pc, #200]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d2c:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d50:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d56:	4b26      	ldr	r3, [pc, #152]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d7a:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001da4:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3301      	adds	r3, #1
 8001dae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f47f ae78 	bne.w	8001ab0 <HAL_GPIO_Init+0x10>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	48000c00 	.word	0x48000c00
 8001de4:	48001000 	.word	0x48001000
 8001de8:	48001400 	.word	0x48001400
 8001dec:	48001800 	.word	0x48001800
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
 8001e00:	4613      	mov	r3, r2
 8001e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e04:	787b      	ldrb	r3, [r7, #1]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e081      	b.n	8001f3a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fd0e 	bl	800086c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2224      	movs	r2, #36	; 0x24
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d107      	bne.n	8001e9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	e006      	b.n	8001eac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001eaa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d104      	bne.n	8001ebe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ebc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ee0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69d9      	ldr	r1, [r3, #28]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1a      	ldr	r2, [r3, #32]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2220      	movs	r2, #32
 8001f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d138      	bne.n	8001fca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e032      	b.n	8001fcc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2224      	movs	r2, #36	; 0x24
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f94:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6819      	ldr	r1, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0201 	orr.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fca:	2302      	movs	r3, #2
  }
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d139      	bne.n	8002062 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e033      	b.n	8002064 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2224      	movs	r2, #36	; 0x24
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800202a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002062:	2302      	movs	r3, #2
  }
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e041      	b.n	8002106 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800208a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f245 5255 	movw	r2, #21845	; 0x5555
 8002094:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6852      	ldr	r2, [r2, #4]
 800209e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6892      	ldr	r2, [r2, #8]
 80020a8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80020aa:	f7ff fbe3 	bl	8001874 <HAL_GetTick>
 80020ae:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80020b0:	e00f      	b.n	80020d2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80020b2:	f7ff fbdf 	bl	8001874 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b31      	cmp	r3, #49	; 0x31
 80020be:	d908      	bls.n	80020d2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e019      	b.n	8002106 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1e8      	bne.n	80020b2 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d005      	beq.n	80020fa <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68d2      	ldr	r2, [r2, #12]
 80020f6:	611a      	str	r2, [r3, #16]
 80020f8:	e004      	b.n	8002104 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800211e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e0af      	b.n	80022a2 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7fe fc48 	bl	80009ec <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	e00a      	b.n	8002190 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3304      	adds	r3, #4
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3301      	adds	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b0f      	cmp	r3, #15
 8002194:	d9f1      	bls.n	800217a <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0204 	orr.w	r2, r2, #4
 80021a4:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <HAL_LCD_Init+0x17c>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6851      	ldr	r1, [r2, #4]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6892      	ldr	r2, [r2, #8]
 80021b8:	4311      	orrs	r1, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80021be:	4311      	orrs	r1, r2
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021c4:	4311      	orrs	r1, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	69d2      	ldr	r2, [r2, #28]
 80021ca:	4311      	orrs	r1, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6a12      	ldr	r2, [r2, #32]
 80021d0:	4311      	orrs	r1, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6992      	ldr	r2, [r2, #24]
 80021d6:	4311      	orrs	r1, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021dc:	4311      	orrs	r1, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	430b      	orrs	r3, r1
 80021e4:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f94c 	bl	8002484 <LCD_WaitForSynchro>
 80021ec:	4603      	mov	r3, r0
 80021ee:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_LCD_Init+0xca>
  {
    return status;
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	e053      	b.n	80022a2 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002232:	f7ff fb1f 	bl	8001874 <HAL_GetTick>
 8002236:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8002238:	e00c      	b.n	8002254 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800223a:	f7ff fb1b 	bl	8001874 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002248:	d904      	bls.n	8002254 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2208      	movs	r2, #8
 800224e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e026      	b.n	80022a2 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d1eb      	bne.n	800223a <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002262:	f7ff fb07 	bl	8001874 <HAL_GetTick>
 8002266:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8002268:	e00c      	b.n	8002284 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800226a:	f7ff fb03 	bl	8001874 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002278:	d904      	bls.n	8002284 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2210      	movs	r2, #16
 800227e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e00e      	b.n	80022a2 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b10      	cmp	r3, #16
 8002290:	d1eb      	bne.n	800226a <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	fc00000e 	.word	0xfc00000e

080022b0 <HAL_LCD_Write>:
  * @param RAMRegisterMask specifies the LCD RAM Register Data Mask.
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c4:	75fb      	strb	r3, [r7, #23]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d002      	beq.n	80022d2 <HAL_LCD_Write+0x22>
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d144      	bne.n	800235c <HAL_LCD_Write+0xac>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if (hlcd->State == HAL_LCD_STATE_READY)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d12a      	bne.n	8002334 <HAL_LCD_Write+0x84>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_LCD_Write+0x3c>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e038      	b.n	800235e <HAL_LCD_Write+0xae>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Get timeout */
      tickstart = HAL_GetTick();
 80022fc:	f7ff faba 	bl	8001874 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /*!< Wait Until the LCD is ready */
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8002302:	e010      	b.n	8002326 <HAL_LCD_Write+0x76>
      {
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002304:	f7ff fab6 	bl	8001874 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002312:	d908      	bls.n	8002326 <HAL_LCD_Write+0x76>
        {
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2202      	movs	r2, #2
 8002318:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e01b      	b.n	800235e <HAL_LCD_Write+0xae>
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b04      	cmp	r3, #4
 8002332:	d0e7      	beq.n	8002304 <HAL_LCD_Write+0x54>
        }
      }
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	3304      	adds	r3, #4
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	401a      	ands	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6819      	ldr	r1, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	431a      	orrs	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	3304      	adds	r3, #4
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e000      	b.n	800235e <HAL_LCD_Write+0xae>
  }
  else
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002378:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 800237a:	7cbb      	ldrb	r3, [r7, #18]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d002      	beq.n	8002386 <HAL_LCD_Clear+0x20>
 8002380:	7cbb      	ldrb	r3, [r7, #18]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d140      	bne.n	8002408 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_LCD_Clear+0x2e>
 8002390:	2302      	movs	r3, #2
 8002392:	e03a      	b.n	800240a <HAL_LCD_Clear+0xa4>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 80023a4:	f7ff fa66 	bl	8001874 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80023aa:	e010      	b.n	80023ce <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80023ac:	f7ff fa62 	bl	8001874 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ba:	d908      	bls.n	80023ce <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e01d      	b.n	800240a <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d0e7      	beq.n	80023ac <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	e00a      	b.n	80023f8 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	3304      	adds	r3, #4
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	2200      	movs	r2, #0
 80023f0:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3301      	adds	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b0f      	cmp	r3, #15
 80023fc:	d9f1      	bls.n	80023e2 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f807 	bl	8002412 <HAL_LCD_UpdateDisplayRequest>
 8002404:	4603      	mov	r3, r0
 8002406:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8002408:	7cfb      	ldrb	r3, [r7, #19]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2208      	movs	r2, #8
 8002420:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0204 	orr.w	r2, r2, #4
 8002430:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002432:	f7ff fa1f 	bl	8001874 <HAL_GetTick>
 8002436:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8002438:	e010      	b.n	800245c <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800243a:	f7ff fa1b 	bl	8001874 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002448:	d908      	bls.n	800245c <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2204      	movs	r2, #4
 800244e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e00f      	b.n	800247c <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b08      	cmp	r3, #8
 8002468:	d1e7      	bne.n	800243a <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 800248c:	f7ff f9f2 	bl	8001874 <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8002492:	e00c      	b.n	80024ae <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002494:	f7ff f9ee 	bl	8001874 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024a2:	d904      	bls.n	80024ae <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e007      	b.n	80024be <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d1eb      	bne.n	8002494 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40007000 	.word	0x40007000

080024e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_PWREx_GetVoltageRange+0x18>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40007000 	.word	0x40007000

08002504 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002512:	d130      	bne.n	8002576 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002514:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800251c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002520:	d038      	beq.n	8002594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800252a:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800252c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002530:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2232      	movs	r2, #50	; 0x32
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	4a1b      	ldr	r2, [pc, #108]	; (80025ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0c9b      	lsrs	r3, r3, #18
 8002544:	3301      	adds	r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002548:	e002      	b.n	8002550 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3b01      	subs	r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255c:	d102      	bne.n	8002564 <HAL_PWREx_ControlVoltageScaling+0x60>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f2      	bne.n	800254a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002564:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002570:	d110      	bne.n	8002594 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e00f      	b.n	8002596 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800257e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002582:	d007      	beq.n	8002594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800258c:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002592:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40007000 	.word	0x40007000
 80025a8:	20000000 	.word	0x20000000
 80025ac:	431bde83 	.word	0x431bde83

080025b0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80025b8:	f7ff f95c 	bl	8001874 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e063      	b.n	8002690 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10b      	bne.n	80025ec <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7fe fbe7 	bl	8000db0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80025e2:	f241 3188 	movw	r1, #5000	; 0x1388
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f858 	bl	800269c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	021a      	lsls	r2, r3, #8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	2120      	movs	r1, #32
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f850 	bl	80026b8 <QSPI_WaitFlagStateUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800261c:	7afb      	ldrb	r3, [r7, #11]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d131      	bne.n	8002686 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800262c:	f023 0310 	bic.w	r3, r3, #16
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6852      	ldr	r2, [r2, #4]
 8002634:	0611      	lsls	r1, r2, #24
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68d2      	ldr	r2, [r2, #12]
 800263a:	4311      	orrs	r1, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	430b      	orrs	r3, r1
 8002642:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_QSPI_Init+0xe8>)
 800264c:	4013      	ands	r3, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6912      	ldr	r2, [r2, #16]
 8002652:	0411      	lsls	r1, r2, #16
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6952      	ldr	r2, [r2, #20]
 8002658:	4311      	orrs	r1, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6992      	ldr	r2, [r2, #24]
 800265e:	4311      	orrs	r1, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	430b      	orrs	r3, r1
 8002666:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800268e:	7afb      	ldrb	r3, [r7, #11]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	ffe0f8fe 	.word	0xffe0f8fe

0800269c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80026c8:	e01a      	b.n	8002700 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d0:	d016      	beq.n	8002700 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d2:	f7ff f8cf 	bl	8001874 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d302      	bcc.n	80026e8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10b      	bne.n	8002700 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2204      	movs	r2, #4
 80026ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e00e      	b.n	800271e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	bf14      	ite	ne
 800270e:	2301      	movne	r3, #1
 8002710:	2300      	moveq	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	429a      	cmp	r2, r3
 800271a:	d1d6      	bne.n	80026ca <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e3d8      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800273a:	4b97      	ldr	r3, [pc, #604]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002744:	4b94      	ldr	r3, [pc, #592]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80e4 	beq.w	8002924 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <HAL_RCC_OscConfig+0x4a>
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b0c      	cmp	r3, #12
 8002766:	f040 808b 	bne.w	8002880 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b01      	cmp	r3, #1
 800276e:	f040 8087 	bne.w	8002880 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002772:	4b89      	ldr	r3, [pc, #548]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_RCC_OscConfig+0x62>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e3b0      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1a      	ldr	r2, [r3, #32]
 800278e:	4b82      	ldr	r3, [pc, #520]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d004      	beq.n	80027a4 <HAL_RCC_OscConfig+0x7c>
 800279a:	4b7f      	ldr	r3, [pc, #508]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a2:	e005      	b.n	80027b0 <HAL_RCC_OscConfig+0x88>
 80027a4:	4b7c      	ldr	r3, [pc, #496]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80027a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d223      	bcs.n	80027fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fd43 	bl	8003244 <RCC_SetFlashLatencyFromMSIRange>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e391      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c8:	4b73      	ldr	r3, [pc, #460]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a72      	ldr	r2, [pc, #456]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80027ce:	f043 0308 	orr.w	r3, r3, #8
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b70      	ldr	r3, [pc, #448]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	496d      	ldr	r1, [pc, #436]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e6:	4b6c      	ldr	r3, [pc, #432]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	4968      	ldr	r1, [pc, #416]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
 80027fa:	e025      	b.n	8002848 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027fc:	4b66      	ldr	r3, [pc, #408]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a65      	ldr	r2, [pc, #404]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 8002802:	f043 0308 	orr.w	r3, r3, #8
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b63      	ldr	r3, [pc, #396]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4960      	ldr	r1, [pc, #384]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800281a:	4b5f      	ldr	r3, [pc, #380]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	495b      	ldr	r1, [pc, #364]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d109      	bne.n	8002848 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fd03 	bl	8003244 <RCC_SetFlashLatencyFromMSIRange>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e351      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002848:	f000 fc38 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b52      	ldr	r3, [pc, #328]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	4950      	ldr	r1, [pc, #320]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
 8002864:	4a4e      	ldr	r2, [pc, #312]	; (80029a0 <HAL_RCC_OscConfig+0x278>)
 8002866:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002868:	4b4e      	ldr	r3, [pc, #312]	; (80029a4 <HAL_RCC_OscConfig+0x27c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe ffb1 	bl	80017d4 <HAL_InitTick>
 8002872:	4603      	mov	r3, r0
 8002874:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d052      	beq.n	8002922 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	e335      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d032      	beq.n	80028ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002888:	4b43      	ldr	r3, [pc, #268]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a42      	ldr	r2, [pc, #264]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002894:	f7fe ffee 	bl	8001874 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800289c:	f7fe ffea 	bl	8001874 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e31e      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ae:	4b3a      	ldr	r3, [pc, #232]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ba:	4b37      	ldr	r3, [pc, #220]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a36      	ldr	r2, [pc, #216]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80028c0:	f043 0308 	orr.w	r3, r3, #8
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b34      	ldr	r3, [pc, #208]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4931      	ldr	r1, [pc, #196]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028d8:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	492c      	ldr	r1, [pc, #176]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
 80028ec:	e01a      	b.n	8002924 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028ee:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a29      	ldr	r2, [pc, #164]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80028f4:	f023 0301 	bic.w	r3, r3, #1
 80028f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028fa:	f7fe ffbb 	bl	8001874 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002902:	f7fe ffb7 	bl	8001874 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e2eb      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002914:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f0      	bne.n	8002902 <HAL_RCC_OscConfig+0x1da>
 8002920:	e000      	b.n	8002924 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002922:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d074      	beq.n	8002a1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2b08      	cmp	r3, #8
 8002934:	d005      	beq.n	8002942 <HAL_RCC_OscConfig+0x21a>
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b0c      	cmp	r3, #12
 800293a:	d10e      	bne.n	800295a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d10b      	bne.n	800295a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d064      	beq.n	8002a18 <HAL_RCC_OscConfig+0x2f0>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d160      	bne.n	8002a18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e2c8      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x24a>
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 800296a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	e026      	b.n	80029c0 <HAL_RCC_OscConfig+0x298>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800297a:	d115      	bne.n	80029a8 <HAL_RCC_OscConfig+0x280>
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a05      	ldr	r2, [pc, #20]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 8002982:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	4b03      	ldr	r3, [pc, #12]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a02      	ldr	r2, [pc, #8]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 800298e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	e014      	b.n	80029c0 <HAL_RCC_OscConfig+0x298>
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	08005c60 	.word	0x08005c60
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000004 	.word	0x20000004
 80029a8:	4ba0      	ldr	r3, [pc, #640]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a9f      	ldr	r2, [pc, #636]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 80029ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4b9d      	ldr	r3, [pc, #628]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a9c      	ldr	r2, [pc, #624]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 80029ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d013      	beq.n	80029f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe ff54 	bl	8001874 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d0:	f7fe ff50 	bl	8001874 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	; 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e284      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029e2:	4b92      	ldr	r3, [pc, #584]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x2a8>
 80029ee:	e014      	b.n	8002a1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe ff40 	bl	8001874 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f8:	f7fe ff3c 	bl	8001874 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e270      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a0a:	4b88      	ldr	r3, [pc, #544]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x2d0>
 8002a16:	e000      	b.n	8002a1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d060      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_OscConfig+0x310>
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	d119      	bne.n	8002a66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d116      	bne.n	8002a66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a38:	4b7c      	ldr	r3, [pc, #496]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_RCC_OscConfig+0x328>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e24d      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a50:	4b76      	ldr	r3, [pc, #472]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	061b      	lsls	r3, r3, #24
 8002a5e:	4973      	ldr	r1, [pc, #460]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a64:	e040      	b.n	8002ae8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d023      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a6e:	4b6f      	ldr	r3, [pc, #444]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a6e      	ldr	r2, [pc, #440]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fefb 	bl	8001874 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a82:	f7fe fef7 	bl	8001874 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e22b      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a94:	4b65      	ldr	r3, [pc, #404]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa0:	4b62      	ldr	r3, [pc, #392]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	495f      	ldr	r1, [pc, #380]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
 8002ab4:	e018      	b.n	8002ae8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab6:	4b5d      	ldr	r3, [pc, #372]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a5c      	ldr	r2, [pc, #368]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fed7 	bl	8001874 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aca:	f7fe fed3 	bl	8001874 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e207      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002adc:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d03c      	beq.n	8002b6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01c      	beq.n	8002b36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afc:	4b4b      	ldr	r3, [pc, #300]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b02:	4a4a      	ldr	r2, [pc, #296]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0c:	f7fe feb2 	bl	8001874 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b14:	f7fe feae 	bl	8001874 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1e2      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b26:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ef      	beq.n	8002b14 <HAL_RCC_OscConfig+0x3ec>
 8002b34:	e01b      	b.n	8002b6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b36:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b3c:	4a3b      	ldr	r2, [pc, #236]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b46:	f7fe fe95 	bl	8001874 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4e:	f7fe fe91 	bl	8001874 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e1c5      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b60:	4b32      	ldr	r3, [pc, #200]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1ef      	bne.n	8002b4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80a6 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b80:	4b2a      	ldr	r3, [pc, #168]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10d      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8c:	4b27      	ldr	r3, [pc, #156]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	4a26      	ldr	r2, [pc, #152]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b96:	6593      	str	r3, [r2, #88]	; 0x58
 8002b98:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba8:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HAL_RCC_OscConfig+0x508>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d118      	bne.n	8002be6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb4:	4b1e      	ldr	r3, [pc, #120]	; (8002c30 <HAL_RCC_OscConfig+0x508>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <HAL_RCC_OscConfig+0x508>)
 8002bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc0:	f7fe fe58 	bl	8001874 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc8:	f7fe fe54 	bl	8001874 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e188      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bda:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <HAL_RCC_OscConfig+0x508>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d108      	bne.n	8002c00 <HAL_RCC_OscConfig+0x4d8>
 8002bee:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bfe:	e029      	b.n	8002c54 <HAL_RCC_OscConfig+0x52c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d115      	bne.n	8002c34 <HAL_RCC_OscConfig+0x50c>
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	4a07      	ldr	r2, [pc, #28]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002c10:	f043 0304 	orr.w	r3, r3, #4
 8002c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c18:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	4a03      	ldr	r2, [pc, #12]	; (8002c2c <HAL_RCC_OscConfig+0x504>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c28:	e014      	b.n	8002c54 <HAL_RCC_OscConfig+0x52c>
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40007000 	.word	0x40007000
 8002c34:	4b91      	ldr	r3, [pc, #580]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3a:	4a90      	ldr	r2, [pc, #576]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c44:	4b8d      	ldr	r3, [pc, #564]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4a:	4a8c      	ldr	r2, [pc, #560]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002c4c:	f023 0304 	bic.w	r3, r3, #4
 8002c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d016      	beq.n	8002c8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7fe fe0a 	bl	8001874 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c64:	f7fe fe06 	bl	8001874 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e138      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c7a:	4b80      	ldr	r3, [pc, #512]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0ed      	beq.n	8002c64 <HAL_RCC_OscConfig+0x53c>
 8002c88:	e015      	b.n	8002cb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fdf3 	bl	8001874 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7fe fdef 	bl	8001874 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e121      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ca8:	4b74      	ldr	r3, [pc, #464]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1ed      	bne.n	8002c92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb6:	7ffb      	ldrb	r3, [r7, #31]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d105      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cbc:	4b6f      	ldr	r3, [pc, #444]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc0:	4a6e      	ldr	r2, [pc, #440]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 810c 	beq.w	8002eea <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	f040 80d4 	bne.w	8002e84 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cdc:	4b67      	ldr	r3, [pc, #412]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f003 0203 	and.w	r2, r3, #3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d130      	bne.n	8002d52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d127      	bne.n	8002d52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d11f      	bne.n	8002d52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d1c:	2a07      	cmp	r2, #7
 8002d1e:	bf14      	ite	ne
 8002d20:	2201      	movne	r2, #1
 8002d22:	2200      	moveq	r2, #0
 8002d24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d113      	bne.n	8002d52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	3b01      	subs	r3, #1
 8002d38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d109      	bne.n	8002d52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d06e      	beq.n	8002e30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2b0c      	cmp	r3, #12
 8002d56:	d069      	beq.n	8002e2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d58:	4b48      	ldr	r3, [pc, #288]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d64:	4b45      	ldr	r3, [pc, #276]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0bb      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d74:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a40      	ldr	r2, [pc, #256]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d80:	f7fe fd78 	bl	8001874 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe fd74 	bl	8001874 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0a8      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d9a:	4b38      	ldr	r3, [pc, #224]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da6:	4b35      	ldr	r3, [pc, #212]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	4b35      	ldr	r3, [pc, #212]	; (8002e80 <HAL_RCC_OscConfig+0x758>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002db6:	3a01      	subs	r2, #1
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	4311      	orrs	r1, r2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dc0:	0212      	lsls	r2, r2, #8
 8002dc2:	4311      	orrs	r1, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dc8:	0852      	lsrs	r2, r2, #1
 8002dca:	3a01      	subs	r2, #1
 8002dcc:	0552      	lsls	r2, r2, #21
 8002dce:	4311      	orrs	r1, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dd4:	0852      	lsrs	r2, r2, #1
 8002dd6:	3a01      	subs	r2, #1
 8002dd8:	0652      	lsls	r2, r2, #25
 8002dda:	4311      	orrs	r1, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002de0:	0912      	lsrs	r2, r2, #4
 8002de2:	0452      	lsls	r2, r2, #17
 8002de4:	430a      	orrs	r2, r1
 8002de6:	4925      	ldr	r1, [pc, #148]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002dec:	4b23      	ldr	r3, [pc, #140]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002df8:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4a1f      	ldr	r2, [pc, #124]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e04:	f7fe fd36 	bl	8001874 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe fd32 	bl	8001874 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e066      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e2a:	e05e      	b.n	8002eea <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e05d      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d156      	bne.n	8002eea <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e54:	f7fe fd0e 	bl	8001874 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7fe fd0a 	bl	8001874 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e03e      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6e:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <HAL_RCC_OscConfig+0x754>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x734>
 8002e7a:	e036      	b.n	8002eea <HAL_RCC_OscConfig+0x7c2>
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d02d      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <HAL_RCC_OscConfig+0x7cc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a19      	ldr	r2, [pc, #100]	; (8002ef4 <HAL_RCC_OscConfig+0x7cc>)
 8002e90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e94:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002e96:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <HAL_RCC_OscConfig+0x7cc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d105      	bne.n	8002eae <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_RCC_OscConfig+0x7cc>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <HAL_RCC_OscConfig+0x7cc>)
 8002ea8:	f023 0303 	bic.w	r3, r3, #3
 8002eac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_RCC_OscConfig+0x7cc>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	4a10      	ldr	r2, [pc, #64]	; (8002ef4 <HAL_RCC_OscConfig+0x7cc>)
 8002eb4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fcd9 	bl	8001874 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec6:	f7fe fcd5 	bl	8001874 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e009      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_OscConfig+0x7cc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f0      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x79e>
 8002ee4:	e001      	b.n	8002eea <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0c8      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b66      	ldr	r3, [pc, #408]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d910      	bls.n	8002f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b63      	ldr	r3, [pc, #396]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 0207 	bic.w	r2, r3, #7
 8002f22:	4961      	ldr	r1, [pc, #388]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b5f      	ldr	r3, [pc, #380]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0b0      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d04c      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d107      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f50:	4b56      	ldr	r3, [pc, #344]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d121      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e09e      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f68:	4b50      	ldr	r3, [pc, #320]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d115      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e092      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f80:	4b4a      	ldr	r3, [pc, #296]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e086      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f90:	4b46      	ldr	r3, [pc, #280]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e07e      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fa0:	4b42      	ldr	r3, [pc, #264]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 0203 	bic.w	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	493f      	ldr	r1, [pc, #252]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb2:	f7fe fc5f 	bl	8001874 <HAL_GetTick>
 8002fb6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb8:	e00a      	b.n	8002fd0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fba:	f7fe fc5b 	bl	8001874 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e066      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd0:	4b36      	ldr	r3, [pc, #216]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 020c 	and.w	r2, r3, #12
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d1eb      	bne.n	8002fba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fee:	4b2f      	ldr	r3, [pc, #188]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	492c      	ldr	r1, [pc, #176]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003000:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d210      	bcs.n	8003030 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 0207 	bic.w	r2, r3, #7
 8003016:	4924      	ldr	r1, [pc, #144]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e036      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4918      	ldr	r1, [pc, #96]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800305a:	4b14      	ldr	r3, [pc, #80]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4910      	ldr	r1, [pc, #64]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800306e:	f000 f825 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 8003072:	4602      	mov	r2, r0
 8003074:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	490c      	ldr	r1, [pc, #48]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	5ccb      	ldrb	r3, [r1, r3]
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	fa22 f303 	lsr.w	r3, r2, r3
 800308a:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe fb9e 	bl	80017d4 <HAL_InitTick>
 8003098:	4603      	mov	r3, r0
 800309a:	72fb      	strb	r3, [r7, #11]

  return status;
 800309c:	7afb      	ldrb	r3, [r7, #11]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40022000 	.word	0x40022000
 80030ac:	40021000 	.word	0x40021000
 80030b0:	08005c60 	.word	0x08005c60
 80030b4:	20000000 	.word	0x20000000
 80030b8:	20000004 	.word	0x20000004

080030bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ca:	4b3e      	ldr	r3, [pc, #248]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030d4:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x34>
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b0c      	cmp	r3, #12
 80030e8:	d121      	bne.n	800312e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d11e      	bne.n	800312e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030f0:	4b34      	ldr	r3, [pc, #208]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d107      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030fc:	4b31      	ldr	r3, [pc, #196]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	e005      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800310c:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003118:	4a2b      	ldr	r2, [pc, #172]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003120:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10d      	bne.n	8003144 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800312c:	e00a      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	2b04      	cmp	r3, #4
 8003132:	d102      	bne.n	800313a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	e004      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d101      	bne.n	8003144 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003140:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003142:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	2b0c      	cmp	r3, #12
 8003148:	d134      	bne.n	80031b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800314a:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d003      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0xa6>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d003      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0xac>
 8003160:	e005      	b.n	800316e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003162:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003164:	617b      	str	r3, [r7, #20]
      break;
 8003166:	e005      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800316a:	617b      	str	r3, [r7, #20]
      break;
 800316c:	e002      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	617b      	str	r3, [r7, #20]
      break;
 8003172:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003174:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	3301      	adds	r3, #1
 8003180:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	fb03 f202 	mul.w	r2, r3, r2
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	0e5b      	lsrs	r3, r3, #25
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	3301      	adds	r3, #1
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031b4:	69bb      	ldr	r3, [r7, #24]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3724      	adds	r7, #36	; 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	08005c78 	.word	0x08005c78
 80031cc:	00f42400 	.word	0x00f42400
 80031d0:	007a1200 	.word	0x007a1200

080031d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000000 	.word	0x20000000

080031ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031f0:	f7ff fff0 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4904      	ldr	r1, [pc, #16]	; (8003214 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	08005c70 	.word	0x08005c70

08003218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800321c:	f7ff ffda 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	0adb      	lsrs	r3, r3, #11
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4904      	ldr	r1, [pc, #16]	; (8003240 <HAL_RCC_GetPCLK2Freq+0x28>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40021000 	.word	0x40021000
 8003240:	08005c70 	.word	0x08005c70

08003244 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800324c:	2300      	movs	r3, #0
 800324e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003250:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800325c:	f7ff f944 	bl	80024e8 <HAL_PWREx_GetVoltageRange>
 8003260:	6178      	str	r0, [r7, #20]
 8003262:	e014      	b.n	800328e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003264:	4b25      	ldr	r3, [pc, #148]	; (80032fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	4a24      	ldr	r2, [pc, #144]	; (80032fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800326a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326e:	6593      	str	r3, [r2, #88]	; 0x58
 8003270:	4b22      	ldr	r3, [pc, #136]	; (80032fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800327c:	f7ff f934 	bl	80024e8 <HAL_PWREx_GetVoltageRange>
 8003280:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003282:	4b1e      	ldr	r3, [pc, #120]	; (80032fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003286:	4a1d      	ldr	r2, [pc, #116]	; (80032fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800328c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003294:	d10b      	bne.n	80032ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b80      	cmp	r3, #128	; 0x80
 800329a:	d919      	bls.n	80032d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2ba0      	cmp	r3, #160	; 0xa0
 80032a0:	d902      	bls.n	80032a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032a2:	2302      	movs	r3, #2
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	e013      	b.n	80032d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032a8:	2301      	movs	r3, #1
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	e010      	b.n	80032d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b80      	cmp	r3, #128	; 0x80
 80032b2:	d902      	bls.n	80032ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032b4:	2303      	movs	r3, #3
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	e00a      	b.n	80032d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b80      	cmp	r3, #128	; 0x80
 80032be:	d102      	bne.n	80032c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032c0:	2302      	movs	r3, #2
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	e004      	b.n	80032d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b70      	cmp	r3, #112	; 0x70
 80032ca:	d101      	bne.n	80032d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032cc:	2301      	movs	r3, #1
 80032ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 0207 	bic.w	r2, r3, #7
 80032d8:	4909      	ldr	r1, [pc, #36]	; (8003300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032e0:	4b07      	ldr	r3, [pc, #28]	; (8003300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d001      	beq.n	80032f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000
 8003300:	40022000 	.word	0x40022000

08003304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800330c:	2300      	movs	r3, #0
 800330e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003310:	2300      	movs	r3, #0
 8003312:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331c:	2b00      	cmp	r3, #0
 800331e:	d041      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003324:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003328:	d02a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800332a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800332e:	d824      	bhi.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003330:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003334:	d008      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003336:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800333a:	d81e      	bhi.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003344:	d010      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003346:	e018      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003348:	4b86      	ldr	r3, [pc, #536]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a85      	ldr	r2, [pc, #532]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003352:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003354:	e015      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f001 f829 	bl	80043b4 <RCCEx_PLLSAI1_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003366:	e00c      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3320      	adds	r3, #32
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f001 f914 	bl	800459c <RCCEx_PLLSAI2_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003378:	e003      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	74fb      	strb	r3, [r7, #19]
      break;
 800337e:	e000      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003388:	4b76      	ldr	r3, [pc, #472]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003396:	4973      	ldr	r1, [pc, #460]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800339e:	e001      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a0:	7cfb      	ldrb	r3, [r7, #19]
 80033a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d041      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033b8:	d02a      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033be:	d824      	bhi.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033c4:	d008      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ca:	d81e      	bhi.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033d4:	d010      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033d6:	e018      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033d8:	4b62      	ldr	r3, [pc, #392]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4a61      	ldr	r2, [pc, #388]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033e4:	e015      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3304      	adds	r3, #4
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 ffe1 	bl	80043b4 <RCCEx_PLLSAI1_Config>
 80033f2:	4603      	mov	r3, r0
 80033f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033f6:	e00c      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3320      	adds	r3, #32
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 f8cc 	bl	800459c <RCCEx_PLLSAI2_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003408:	e003      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	74fb      	strb	r3, [r7, #19]
      break;
 800340e:	e000      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003410:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003412:	7cfb      	ldrb	r3, [r7, #19]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10b      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003418:	4b52      	ldr	r3, [pc, #328]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003426:	494f      	ldr	r1, [pc, #316]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800342e:	e001      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80a0 	beq.w	8003582 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003442:	2300      	movs	r3, #0
 8003444:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003446:	4b47      	ldr	r3, [pc, #284]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003456:	2300      	movs	r3, #0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345c:	4b41      	ldr	r3, [pc, #260]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	4a40      	ldr	r2, [pc, #256]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003466:	6593      	str	r3, [r2, #88]	; 0x58
 8003468:	4b3e      	ldr	r3, [pc, #248]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003474:	2301      	movs	r3, #1
 8003476:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003478:	4b3b      	ldr	r3, [pc, #236]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a3a      	ldr	r2, [pc, #232]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800347e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003482:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003484:	f7fe f9f6 	bl	8001874 <HAL_GetTick>
 8003488:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800348a:	e009      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348c:	f7fe f9f2 	bl	8001874 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d902      	bls.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	74fb      	strb	r3, [r7, #19]
        break;
 800349e:	e005      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034a0:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ef      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d15c      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034b2:	4b2c      	ldr	r3, [pc, #176]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01f      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d019      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034d0:	4b24      	ldr	r3, [pc, #144]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034dc:	4b21      	ldr	r3, [pc, #132]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	4a20      	ldr	r2, [pc, #128]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034ec:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	4a1c      	ldr	r2, [pc, #112]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034fc:	4a19      	ldr	r2, [pc, #100]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d016      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fe f9b1 	bl	8001874 <HAL_GetTick>
 8003512:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003514:	e00b      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003516:	f7fe f9ad 	bl	8001874 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	f241 3288 	movw	r2, #5000	; 0x1388
 8003524:	4293      	cmp	r3, r2
 8003526:	d902      	bls.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	74fb      	strb	r3, [r7, #19]
            break;
 800352c:	e006      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800352e:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ec      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10c      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003552:	4904      	ldr	r1, [pc, #16]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800355a:	e009      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800355c:	7cfb      	ldrb	r3, [r7, #19]
 800355e:	74bb      	strb	r3, [r7, #18]
 8003560:	e006      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003570:	7c7b      	ldrb	r3, [r7, #17]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d105      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003576:	4b9e      	ldr	r3, [pc, #632]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357a:	4a9d      	ldr	r2, [pc, #628]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003580:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800358e:	4b98      	ldr	r3, [pc, #608]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003594:	f023 0203 	bic.w	r2, r3, #3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	4994      	ldr	r1, [pc, #592]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035b0:	4b8f      	ldr	r3, [pc, #572]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	f023 020c 	bic.w	r2, r3, #12
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	498c      	ldr	r1, [pc, #560]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035d2:	4b87      	ldr	r3, [pc, #540]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	4983      	ldr	r1, [pc, #524]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035f4:	4b7e      	ldr	r3, [pc, #504]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	497b      	ldr	r1, [pc, #492]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003616:	4b76      	ldr	r3, [pc, #472]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003624:	4972      	ldr	r1, [pc, #456]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003638:	4b6d      	ldr	r3, [pc, #436]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003646:	496a      	ldr	r1, [pc, #424]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800365a:	4b65      	ldr	r3, [pc, #404]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003660:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003668:	4961      	ldr	r1, [pc, #388]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800367c:	4b5c      	ldr	r3, [pc, #368]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368a:	4959      	ldr	r1, [pc, #356]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800369e:	4b54      	ldr	r3, [pc, #336]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ac:	4950      	ldr	r1, [pc, #320]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036c0:	4b4b      	ldr	r3, [pc, #300]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	4948      	ldr	r1, [pc, #288]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036e2:	4b43      	ldr	r3, [pc, #268]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	493f      	ldr	r1, [pc, #252]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d028      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003704:	4b3a      	ldr	r3, [pc, #232]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003712:	4937      	ldr	r1, [pc, #220]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800371e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003722:	d106      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003724:	4b32      	ldr	r3, [pc, #200]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4a31      	ldr	r2, [pc, #196]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800372e:	60d3      	str	r3, [r2, #12]
 8003730:	e011      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003736:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800373a:	d10c      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	2101      	movs	r1, #1
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fe36 	bl	80043b4 <RCCEx_PLLSAI1_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003752:	7cfb      	ldrb	r3, [r7, #19]
 8003754:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d028      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003762:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003768:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	491f      	ldr	r1, [pc, #124]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003780:	d106      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003782:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	4a1a      	ldr	r2, [pc, #104]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800378c:	60d3      	str	r3, [r2, #12]
 800378e:	e011      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003798:	d10c      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3304      	adds	r3, #4
 800379e:	2101      	movs	r1, #1
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fe07 	bl	80043b4 <RCCEx_PLLSAI1_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037aa:	7cfb      	ldrb	r3, [r7, #19]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80037b0:	7cfb      	ldrb	r3, [r7, #19]
 80037b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d02b      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ce:	4908      	ldr	r1, [pc, #32]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037de:	d109      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4a02      	ldr	r2, [pc, #8]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ea:	60d3      	str	r3, [r2, #12]
 80037ec:	e014      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037fc:	d10c      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	2101      	movs	r1, #1
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fdd5 	bl	80043b4 <RCCEx_PLLSAI1_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800380e:	7cfb      	ldrb	r3, [r7, #19]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003814:	7cfb      	ldrb	r3, [r7, #19]
 8003816:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d02f      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003824:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003832:	4928      	ldr	r1, [pc, #160]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800383e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003842:	d10d      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3304      	adds	r3, #4
 8003848:	2102      	movs	r1, #2
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fdb2 	bl	80043b4 <RCCEx_PLLSAI1_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d014      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	74bb      	strb	r3, [r7, #18]
 800385e:	e011      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003868:	d10c      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3320      	adds	r3, #32
 800386e:	2102      	movs	r1, #2
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fe93 	bl	800459c <RCCEx_PLLSAI2_Config>
 8003876:	4603      	mov	r3, r0
 8003878:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800387a:	7cfb      	ldrb	r3, [r7, #19]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003880:	7cfb      	ldrb	r3, [r7, #19]
 8003882:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003890:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800389e:	490d      	ldr	r1, [pc, #52]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038c2:	4904      	ldr	r1, [pc, #16]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021000 	.word	0x40021000

080038d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ea:	d13e      	bne.n	800396a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80038ec:	4bb2      	ldr	r3, [pc, #712]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f6:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038fe:	d028      	beq.n	8003952 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003906:	f200 8542 	bhi.w	800438e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003910:	d005      	beq.n	800391e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003918:	d00e      	beq.n	8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800391a:	f000 bd38 	b.w	800438e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800391e:	4ba6      	ldr	r3, [pc, #664]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b02      	cmp	r3, #2
 800392a:	f040 8532 	bne.w	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800392e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003932:	61fb      	str	r3, [r7, #28]
      break;
 8003934:	f000 bd2d 	b.w	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003938:	4b9f      	ldr	r3, [pc, #636]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	f040 8527 	bne.w	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003948:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800394c:	61fb      	str	r3, [r7, #28]
      break;
 800394e:	f000 bd22 	b.w	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003952:	4b99      	ldr	r3, [pc, #612]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800395e:	f040 851c 	bne.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8003962:	4b96      	ldr	r3, [pc, #600]	; (8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003964:	61fb      	str	r3, [r7, #28]
      break;
 8003966:	f000 bd18 	b.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800396a:	4b93      	ldr	r3, [pc, #588]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d036      	beq.n	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d840      	bhi.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d003      	beq.n	800398e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d020      	beq.n	80039ce <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800398c:	e039      	b.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800398e:	4b8a      	ldr	r3, [pc, #552]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b02      	cmp	r3, #2
 8003998:	d116      	bne.n	80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800399a:	4b87      	ldr	r3, [pc, #540]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80039a6:	4b84      	ldr	r3, [pc, #528]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	e005      	b.n	80039be <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80039b2:	4b81      	ldr	r3, [pc, #516]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b8:	0a1b      	lsrs	r3, r3, #8
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	4a80      	ldr	r2, [pc, #512]	; (8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80039c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039c6:	e01f      	b.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61bb      	str	r3, [r7, #24]
      break;
 80039cc:	e01c      	b.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039ce:	4b7a      	ldr	r3, [pc, #488]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039da:	d102      	bne.n	80039e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80039dc:	4b79      	ldr	r3, [pc, #484]	; (8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80039de:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039e0:	e012      	b.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
      break;
 80039e6:	e00f      	b.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80039e8:	4b73      	ldr	r3, [pc, #460]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039f4:	d102      	bne.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80039f6:	4b74      	ldr	r3, [pc, #464]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039fa:	e005      	b.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
      break;
 8003a00:	e002      	b.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
      break;
 8003a06:	bf00      	nop
    }

    switch(PeriphClk)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a0e:	f000 80dd 	beq.w	8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a18:	f200 84c1 	bhi.w	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a22:	f000 80d3 	beq.w	8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a2c:	f200 84b7 	bhi.w	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a36:	f000 835f 	beq.w	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a40:	f200 84ad 	bhi.w	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a4a:	f000 847e 	beq.w	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a54:	f200 84a3 	bhi.w	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a5e:	f000 82cd 	beq.w	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a68:	f200 8499 	bhi.w	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a72:	f000 80ab 	beq.w	8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a7c:	f200 848f 	bhi.w	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a86:	f000 8090 	beq.w	8003baa <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a90:	f200 8485 	bhi.w	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a9a:	d07f      	beq.n	8003b9c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa2:	f200 847c 	bhi.w	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aac:	f000 8403 	beq.w	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab6:	f200 8472 	bhi.w	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac0:	f000 83af 	beq.w	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aca:	f200 8468 	bhi.w	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad4:	f000 8379 	beq.w	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ade:	f200 845e 	bhi.w	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b80      	cmp	r3, #128	; 0x80
 8003ae6:	f000 8344 	beq.w	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b80      	cmp	r3, #128	; 0x80
 8003aee:	f200 8456 	bhi.w	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	d84b      	bhi.n	8003b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 844f 	beq.w	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	2b1f      	cmp	r3, #31
 8003b06:	f200 844a 	bhi.w	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b0a:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003cf9 	.word	0x08003cf9
 8003b14:	08003d67 	.word	0x08003d67
 8003b18:	0800439f 	.word	0x0800439f
 8003b1c:	08003dfb 	.word	0x08003dfb
 8003b20:	0800439f 	.word	0x0800439f
 8003b24:	0800439f 	.word	0x0800439f
 8003b28:	0800439f 	.word	0x0800439f
 8003b2c:	08003e81 	.word	0x08003e81
 8003b30:	0800439f 	.word	0x0800439f
 8003b34:	0800439f 	.word	0x0800439f
 8003b38:	0800439f 	.word	0x0800439f
 8003b3c:	0800439f 	.word	0x0800439f
 8003b40:	0800439f 	.word	0x0800439f
 8003b44:	0800439f 	.word	0x0800439f
 8003b48:	0800439f 	.word	0x0800439f
 8003b4c:	08003ef9 	.word	0x08003ef9
 8003b50:	0800439f 	.word	0x0800439f
 8003b54:	0800439f 	.word	0x0800439f
 8003b58:	0800439f 	.word	0x0800439f
 8003b5c:	0800439f 	.word	0x0800439f
 8003b60:	0800439f 	.word	0x0800439f
 8003b64:	0800439f 	.word	0x0800439f
 8003b68:	0800439f 	.word	0x0800439f
 8003b6c:	0800439f 	.word	0x0800439f
 8003b70:	0800439f 	.word	0x0800439f
 8003b74:	0800439f 	.word	0x0800439f
 8003b78:	0800439f 	.word	0x0800439f
 8003b7c:	0800439f 	.word	0x0800439f
 8003b80:	0800439f 	.word	0x0800439f
 8003b84:	0800439f 	.word	0x0800439f
 8003b88:	0800439f 	.word	0x0800439f
 8003b8c:	08003f7b 	.word	0x08003f7b
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b40      	cmp	r3, #64	; 0x40
 8003b94:	f000 82c1 	beq.w	800411a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003b98:	f000 bc01 	b.w	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003b9c:	69b9      	ldr	r1, [r7, #24]
 8003b9e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003ba2:	f000 fdd9 	bl	8004758 <RCCEx_GetSAIxPeriphCLKFreq>
 8003ba6:	61f8      	str	r0, [r7, #28]
      break;
 8003ba8:	e3fa      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003baa:	69b9      	ldr	r1, [r7, #24]
 8003bac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003bb0:	f000 fdd2 	bl	8004758 <RCCEx_GetSAIxPeriphCLKFreq>
 8003bb4:	61f8      	str	r0, [r7, #28]
      break;
 8003bb6:	e3f3      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	0003d090 	.word	0x0003d090
 8003bc0:	08005c78 	.word	0x08005c78
 8003bc4:	00f42400 	.word	0x00f42400
 8003bc8:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003bcc:	4ba9      	ldr	r3, [pc, #676]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003bde:	d00c      	beq.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003be6:	d87f      	bhi.n	8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bee:	d04e      	beq.n	8003c8e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bf6:	d01d      	beq.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003bf8:	e076      	b.n	8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003bfa:	4b9e      	ldr	r3, [pc, #632]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d172      	bne.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003c06:	4b9b      	ldr	r3, [pc, #620]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8003c12:	4b98      	ldr	r3, [pc, #608]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	091b      	lsrs	r3, r3, #4
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	e005      	b.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8003c1e:	4b95      	ldr	r3, [pc, #596]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c24:	0a1b      	lsrs	r3, r3, #8
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	4a93      	ldr	r2, [pc, #588]	; (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c30:	61fb      	str	r3, [r7, #28]
          break;
 8003c32:	e05b      	b.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003c34:	4b8f      	ldr	r3, [pc, #572]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c40:	d156      	bne.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003c42:	4b8c      	ldr	r3, [pc, #560]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c4e:	d14f      	bne.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003c50:	4b88      	ldr	r3, [pc, #544]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c5a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	fb03 f202 	mul.w	r2, r3, r2
 8003c64:	4b83      	ldr	r3, [pc, #524]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	3301      	adds	r3, #1
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003c76:	4b7f      	ldr	r3, [pc, #508]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	0d5b      	lsrs	r3, r3, #21
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	3301      	adds	r3, #1
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	61fb      	str	r3, [r7, #28]
          break;
 8003c8c:	e030      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003c8e:	4b79      	ldr	r3, [pc, #484]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c9a:	d12b      	bne.n	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003c9c:	4b75      	ldr	r3, [pc, #468]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca8:	d124      	bne.n	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003caa:	4b72      	ldr	r3, [pc, #456]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb4:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	fb03 f202 	mul.w	r2, r3, r2
 8003cbe:	4b6d      	ldr	r3, [pc, #436]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	3301      	adds	r3, #1
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003cd0:	4b68      	ldr	r3, [pc, #416]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	0d5b      	lsrs	r3, r3, #21
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce4:	61fb      	str	r3, [r7, #28]
          break;
 8003ce6:	e005      	b.n	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8003ce8:	bf00      	nop
 8003cea:	e359      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003cec:	bf00      	nop
 8003cee:	e357      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003cf0:	bf00      	nop
 8003cf2:	e355      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003cf4:	bf00      	nop
        break;
 8003cf6:	e353      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003cf8:	4b5e      	ldr	r3, [pc, #376]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d827      	bhi.n	8003d5a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d21 	.word	0x08003d21
 8003d14:	08003d29 	.word	0x08003d29
 8003d18:	08003d31 	.word	0x08003d31
 8003d1c:	08003d45 	.word	0x08003d45
          frequency = HAL_RCC_GetPCLK2Freq();
 8003d20:	f7ff fa7a 	bl	8003218 <HAL_RCC_GetPCLK2Freq>
 8003d24:	61f8      	str	r0, [r7, #28]
          break;
 8003d26:	e01d      	b.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d28:	f7ff f9c8 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 8003d2c:	61f8      	str	r0, [r7, #28]
          break;
 8003d2e:	e019      	b.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d30:	4b50      	ldr	r3, [pc, #320]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3c:	d10f      	bne.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8003d3e:	4b4f      	ldr	r3, [pc, #316]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003d40:	61fb      	str	r3, [r7, #28]
          break;
 8003d42:	e00c      	b.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003d44:	4b4b      	ldr	r3, [pc, #300]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d107      	bne.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8003d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d56:	61fb      	str	r3, [r7, #28]
          break;
 8003d58:	e003      	b.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8003d5a:	bf00      	nop
 8003d5c:	e320      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d5e:	bf00      	nop
 8003d60:	e31e      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d62:	bf00      	nop
        break;
 8003d64:	e31c      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003d66:	4b43      	ldr	r3, [pc, #268]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6c:	f003 030c 	and.w	r3, r3, #12
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b0c      	cmp	r3, #12
 8003d76:	d83a      	bhi.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003db5 	.word	0x08003db5
 8003d84:	08003def 	.word	0x08003def
 8003d88:	08003def 	.word	0x08003def
 8003d8c:	08003def 	.word	0x08003def
 8003d90:	08003dbd 	.word	0x08003dbd
 8003d94:	08003def 	.word	0x08003def
 8003d98:	08003def 	.word	0x08003def
 8003d9c:	08003def 	.word	0x08003def
 8003da0:	08003dc5 	.word	0x08003dc5
 8003da4:	08003def 	.word	0x08003def
 8003da8:	08003def 	.word	0x08003def
 8003dac:	08003def 	.word	0x08003def
 8003db0:	08003dd9 	.word	0x08003dd9
          frequency = HAL_RCC_GetPCLK1Freq();
 8003db4:	f7ff fa1a 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8003db8:	61f8      	str	r0, [r7, #28]
          break;
 8003dba:	e01d      	b.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8003dbc:	f7ff f97e 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 8003dc0:	61f8      	str	r0, [r7, #28]
          break;
 8003dc2:	e019      	b.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003dc4:	4b2b      	ldr	r3, [pc, #172]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd0:	d10f      	bne.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8003dd2:	4b2a      	ldr	r3, [pc, #168]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003dd4:	61fb      	str	r3, [r7, #28]
          break;
 8003dd6:	e00c      	b.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003dd8:	4b26      	ldr	r3, [pc, #152]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d107      	bne.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8003de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dea:	61fb      	str	r3, [r7, #28]
          break;
 8003dec:	e003      	b.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8003dee:	bf00      	nop
 8003df0:	e2d6      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003df2:	bf00      	nop
 8003df4:	e2d4      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003df6:	bf00      	nop
        break;
 8003df8:	e2d2      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003dfa:	4b1e      	ldr	r3, [pc, #120]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b30      	cmp	r3, #48	; 0x30
 8003e0a:	d021      	beq.n	8003e50 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b30      	cmp	r3, #48	; 0x30
 8003e10:	d829      	bhi.n	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d011      	beq.n	8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d823      	bhi.n	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d004      	beq.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8003e2a:	e01c      	b.n	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e2c:	f7ff f9de 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8003e30:	61f8      	str	r0, [r7, #28]
          break;
 8003e32:	e01d      	b.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e34:	f7ff f942 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 8003e38:	61f8      	str	r0, [r7, #28]
          break;
 8003e3a:	e019      	b.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e3c:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e48:	d10f      	bne.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003e4c:	61fb      	str	r3, [r7, #28]
          break;
 8003e4e:	e00c      	b.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e50:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d107      	bne.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8003e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e62:	61fb      	str	r3, [r7, #28]
          break;
 8003e64:	e003      	b.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8003e66:	bf00      	nop
 8003e68:	e29a      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e6a:	bf00      	nop
 8003e6c:	e298      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e6e:	bf00      	nop
        break;
 8003e70:	e296      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000
 8003e78:	08005c78 	.word	0x08005c78
 8003e7c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003e80:	4b9b      	ldr	r3, [pc, #620]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e90:	d021      	beq.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2bc0      	cmp	r3, #192	; 0xc0
 8003e96:	d829      	bhi.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b80      	cmp	r3, #128	; 0x80
 8003e9c:	d011      	beq.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b80      	cmp	r3, #128	; 0x80
 8003ea2:	d823      	bhi.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b40      	cmp	r3, #64	; 0x40
 8003eae:	d004      	beq.n	8003eba <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8003eb0:	e01c      	b.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003eb2:	f7ff f99b 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8003eb6:	61f8      	str	r0, [r7, #28]
          break;
 8003eb8:	e01d      	b.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8003eba:	f7ff f8ff 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 8003ebe:	61f8      	str	r0, [r7, #28]
          break;
 8003ec0:	e019      	b.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ec2:	4b8b      	ldr	r3, [pc, #556]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ece:	d10f      	bne.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8003ed0:	4b88      	ldr	r3, [pc, #544]	; (80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003ed2:	61fb      	str	r3, [r7, #28]
          break;
 8003ed4:	e00c      	b.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ed6:	4b86      	ldr	r3, [pc, #536]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d107      	bne.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8003ee4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee8:	61fb      	str	r3, [r7, #28]
          break;
 8003eea:	e003      	b.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8003eec:	bf00      	nop
 8003eee:	e257      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ef0:	bf00      	nop
 8003ef2:	e255      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ef4:	bf00      	nop
        break;
 8003ef6:	e253      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003ef8:	4b7d      	ldr	r3, [pc, #500]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f02:	613b      	str	r3, [r7, #16]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f0a:	d025      	beq.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f12:	d82c      	bhi.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f1a:	d013      	beq.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f22:	d824      	bhi.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f30:	d004      	beq.n	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8003f32:	e01c      	b.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f34:	f7ff f95a 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8003f38:	61f8      	str	r0, [r7, #28]
          break;
 8003f3a:	e01d      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f3c:	f7ff f8be 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 8003f40:	61f8      	str	r0, [r7, #28]
          break;
 8003f42:	e019      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f44:	4b6a      	ldr	r3, [pc, #424]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f50:	d10f      	bne.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8003f52:	4b68      	ldr	r3, [pc, #416]	; (80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003f54:	61fb      	str	r3, [r7, #28]
          break;
 8003f56:	e00c      	b.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f58:	4b65      	ldr	r3, [pc, #404]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d107      	bne.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8003f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6a:	61fb      	str	r3, [r7, #28]
          break;
 8003f6c:	e003      	b.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8003f6e:	bf00      	nop
 8003f70:	e216      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f72:	bf00      	nop
 8003f74:	e214      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f76:	bf00      	nop
        break;
 8003f78:	e212      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003f7a:	4b5d      	ldr	r3, [pc, #372]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f8c:	d025      	beq.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f94:	d82c      	bhi.n	8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f9c:	d013      	beq.n	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa4:	d824      	bhi.n	8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb2:	d004      	beq.n	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8003fb4:	e01c      	b.n	8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fb6:	f7ff f919 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8003fba:	61f8      	str	r0, [r7, #28]
          break;
 8003fbc:	e01d      	b.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8003fbe:	f7ff f87d 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 8003fc2:	61f8      	str	r0, [r7, #28]
          break;
 8003fc4:	e019      	b.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fc6:	4b4a      	ldr	r3, [pc, #296]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd2:	d10f      	bne.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8003fd4:	4b47      	ldr	r3, [pc, #284]	; (80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003fd6:	61fb      	str	r3, [r7, #28]
          break;
 8003fd8:	e00c      	b.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fda:	4b45      	ldr	r3, [pc, #276]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8003fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fec:	61fb      	str	r3, [r7, #28]
          break;
 8003fee:	e003      	b.n	8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8003ff0:	bf00      	nop
 8003ff2:	e1d5      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ff4:	bf00      	nop
 8003ff6:	e1d3      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ff8:	bf00      	nop
        break;
 8003ffa:	e1d1      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003ffc:	4b3c      	ldr	r3, [pc, #240]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004006:	613b      	str	r3, [r7, #16]
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800400e:	d00c      	beq.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004016:	d864      	bhi.n	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800401e:	d008      	beq.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004026:	d030      	beq.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004028:	e05b      	b.n	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800402a:	f7ff f847 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 800402e:	61f8      	str	r0, [r7, #28]
          break;
 8004030:	e05c      	b.n	80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004032:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800403a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800403e:	d152      	bne.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004040:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d04c      	beq.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800404c:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	0a1b      	lsrs	r3, r3, #8
 8004052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004056:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	fb03 f202 	mul.w	r2, r3, r2
 8004060:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	3301      	adds	r3, #1
 800406c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004070:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004072:	4b1f      	ldr	r3, [pc, #124]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	0e5b      	lsrs	r3, r3, #25
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	3301      	adds	r3, #1
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	fbb2 f3f3 	udiv	r3, r2, r3
 8004086:	61fb      	str	r3, [r7, #28]
          break;
 8004088:	e02d      	b.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800408a:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004096:	d128      	bne.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004098:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d022      	beq.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80040a4:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	0a1b      	lsrs	r3, r3, #8
 80040aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ae:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	fb03 f202 	mul.w	r2, r3, r2
 80040b8:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	3301      	adds	r3, #1
 80040c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80040ca:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	0e5b      	lsrs	r3, r3, #25
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	3301      	adds	r3, #1
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	fbb2 f3f3 	udiv	r3, r2, r3
 80040de:	61fb      	str	r3, [r7, #28]
          break;
 80040e0:	e003      	b.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80040e2:	bf00      	nop
 80040e4:	e15c      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040e6:	bf00      	nop
 80040e8:	e15a      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040ea:	bf00      	nop
        break;
 80040ec:	e158      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000
 80040f4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80040f8:	4b9d      	ldr	r3, [pc, #628]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004102:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800410a:	f7ff f885 	bl	8003218 <HAL_RCC_GetPCLK2Freq>
 800410e:	61f8      	str	r0, [r7, #28]
        break;
 8004110:	e146      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004112:	f7fe ffd3 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 8004116:	61f8      	str	r0, [r7, #28]
        break;
 8004118:	e142      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800411a:	4b95      	ldr	r3, [pc, #596]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004120:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800412c:	d013      	beq.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004134:	d819      	bhi.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004142:	d004      	beq.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004144:	e011      	b.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004146:	f7ff f851 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 800414a:	61f8      	str	r0, [r7, #28]
          break;
 800414c:	e010      	b.n	8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 800414e:	f7fe ffb5 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 8004152:	61f8      	str	r0, [r7, #28]
          break;
 8004154:	e00c      	b.n	8004170 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004156:	4b86      	ldr	r3, [pc, #536]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004162:	d104      	bne.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004164:	4b83      	ldr	r3, [pc, #524]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004166:	61fb      	str	r3, [r7, #28]
          break;
 8004168:	e001      	b.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 800416a:	bf00      	nop
 800416c:	e118      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800416e:	bf00      	nop
        break;
 8004170:	e116      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004172:	4b7f      	ldr	r3, [pc, #508]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004184:	d013      	beq.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800418c:	d819      	bhi.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d004      	beq.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800419a:	d004      	beq.n	80041a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 800419c:	e011      	b.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 800419e:	f7ff f825 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 80041a2:	61f8      	str	r0, [r7, #28]
          break;
 80041a4:	e010      	b.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80041a6:	f7fe ff89 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 80041aa:	61f8      	str	r0, [r7, #28]
          break;
 80041ac:	e00c      	b.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041ae:	4b70      	ldr	r3, [pc, #448]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ba:	d104      	bne.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80041bc:	4b6d      	ldr	r3, [pc, #436]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80041be:	61fb      	str	r3, [r7, #28]
          break;
 80041c0:	e001      	b.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80041c2:	bf00      	nop
 80041c4:	e0ec      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041c6:	bf00      	nop
        break;
 80041c8:	e0ea      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80041ca:	4b69      	ldr	r3, [pc, #420]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041dc:	d013      	beq.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041e4:	d819      	bhi.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d004      	beq.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f2:	d004      	beq.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80041f4:	e011      	b.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041f6:	f7fe fff9 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 80041fa:	61f8      	str	r0, [r7, #28]
          break;
 80041fc:	e010      	b.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80041fe:	f7fe ff5d 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 8004202:	61f8      	str	r0, [r7, #28]
          break;
 8004204:	e00c      	b.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004206:	4b5a      	ldr	r3, [pc, #360]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004212:	d104      	bne.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004214:	4b57      	ldr	r3, [pc, #348]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004216:	61fb      	str	r3, [r7, #28]
          break;
 8004218:	e001      	b.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800421a:	bf00      	nop
 800421c:	e0c0      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800421e:	bf00      	nop
        break;
 8004220:	e0be      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004222:	4b53      	ldr	r3, [pc, #332]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004234:	d02c      	beq.n	8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800423c:	d833      	bhi.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004244:	d01a      	beq.n	800427c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800424c:	d82b      	bhi.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d004      	beq.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800425a:	d004      	beq.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 800425c:	e023      	b.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 800425e:	f7fe ffc5 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8004262:	61f8      	str	r0, [r7, #28]
          break;
 8004264:	e026      	b.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004266:	4b42      	ldr	r3, [pc, #264]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b02      	cmp	r3, #2
 8004272:	d11a      	bne.n	80042aa <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004274:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004278:	61fb      	str	r3, [r7, #28]
          break;
 800427a:	e016      	b.n	80042aa <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800427c:	4b3c      	ldr	r3, [pc, #240]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004288:	d111      	bne.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800428a:	4b3a      	ldr	r3, [pc, #232]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800428c:	61fb      	str	r3, [r7, #28]
          break;
 800428e:	e00e      	b.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004290:	4b37      	ldr	r3, [pc, #220]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b02      	cmp	r3, #2
 800429c:	d109      	bne.n	80042b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 800429e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a2:	61fb      	str	r3, [r7, #28]
          break;
 80042a4:	e005      	b.n	80042b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80042a6:	bf00      	nop
 80042a8:	e07a      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042aa:	bf00      	nop
 80042ac:	e078      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042ae:	bf00      	nop
 80042b0:	e076      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042b2:	bf00      	nop
        break;
 80042b4:	e074      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80042b6:	4b2e      	ldr	r3, [pc, #184]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042c8:	d02c      	beq.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042d0:	d833      	bhi.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042d8:	d01a      	beq.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042e0:	d82b      	bhi.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d004      	beq.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ee:	d004      	beq.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80042f0:	e023      	b.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042f2:	f7fe ff7b 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 80042f6:	61f8      	str	r0, [r7, #28]
          break;
 80042f8:	e026      	b.n	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80042fa:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80042fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b02      	cmp	r3, #2
 8004306:	d11a      	bne.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004308:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800430c:	61fb      	str	r3, [r7, #28]
          break;
 800430e:	e016      	b.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004310:	4b17      	ldr	r3, [pc, #92]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431c:	d111      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800431e:	4b15      	ldr	r3, [pc, #84]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004320:	61fb      	str	r3, [r7, #28]
          break;
 8004322:	e00e      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b02      	cmp	r3, #2
 8004330:	d109      	bne.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004336:	61fb      	str	r3, [r7, #28]
          break;
 8004338:	e005      	b.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800433a:	bf00      	nop
 800433c:	e030      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800433e:	bf00      	nop
 8004340:	e02e      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004342:	bf00      	nop
 8004344:	e02c      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004346:	bf00      	nop
        break;
 8004348:	e02a      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800434a:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d004      	beq.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004362:	d009      	beq.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004364:	e012      	b.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004366:	f7fe ff41 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 800436a:	61f8      	str	r0, [r7, #28]
          break;
 800436c:	e00e      	b.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000
 8004374:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004384:	d101      	bne.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004386:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004388:	61fb      	str	r3, [r7, #28]
          break;
 800438a:	bf00      	nop
        break;
 800438c:	e008      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800438e:	bf00      	nop
 8004390:	e006      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004392:	bf00      	nop
 8004394:	e004      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004396:	bf00      	nop
 8004398:	e002      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800439a:	bf00      	nop
 800439c:	e000      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800439e:	bf00      	nop
    }
  }

  return(frequency);
 80043a0:	69fb      	ldr	r3, [r7, #28]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3720      	adds	r7, #32
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	00f42400 	.word	0x00f42400

080043b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043c2:	4b75      	ldr	r3, [pc, #468]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d018      	beq.n	8004400 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043ce:	4b72      	ldr	r3, [pc, #456]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f003 0203 	and.w	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d10d      	bne.n	80043fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
       ||
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043e6:	4b6c      	ldr	r3, [pc, #432]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	091b      	lsrs	r3, r3, #4
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
       ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d047      	beq.n	800448a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
 80043fe:	e044      	b.n	800448a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b03      	cmp	r3, #3
 8004406:	d018      	beq.n	800443a <RCCEx_PLLSAI1_Config+0x86>
 8004408:	2b03      	cmp	r3, #3
 800440a:	d825      	bhi.n	8004458 <RCCEx_PLLSAI1_Config+0xa4>
 800440c:	2b01      	cmp	r3, #1
 800440e:	d002      	beq.n	8004416 <RCCEx_PLLSAI1_Config+0x62>
 8004410:	2b02      	cmp	r3, #2
 8004412:	d009      	beq.n	8004428 <RCCEx_PLLSAI1_Config+0x74>
 8004414:	e020      	b.n	8004458 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004416:	4b60      	ldr	r3, [pc, #384]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d11d      	bne.n	800445e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004426:	e01a      	b.n	800445e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004428:	4b5b      	ldr	r3, [pc, #364]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004430:	2b00      	cmp	r3, #0
 8004432:	d116      	bne.n	8004462 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004438:	e013      	b.n	8004462 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800443a:	4b57      	ldr	r3, [pc, #348]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10f      	bne.n	8004466 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004446:	4b54      	ldr	r3, [pc, #336]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004456:	e006      	b.n	8004466 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
      break;
 800445c:	e004      	b.n	8004468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800445e:	bf00      	nop
 8004460:	e002      	b.n	8004468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004466:	bf00      	nop
    }

    if(status == HAL_OK)
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10d      	bne.n	800448a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800446e:	4b4a      	ldr	r3, [pc, #296]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	3b01      	subs	r3, #1
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	430b      	orrs	r3, r1
 8004484:	4944      	ldr	r1, [pc, #272]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004486:	4313      	orrs	r3, r2
 8004488:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d17d      	bne.n	800458c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004490:	4b41      	ldr	r3, [pc, #260]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a40      	ldr	r2, [pc, #256]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004496:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800449a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800449c:	f7fd f9ea 	bl	8001874 <HAL_GetTick>
 80044a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044a2:	e009      	b.n	80044b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044a4:	f7fd f9e6 	bl	8001874 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d902      	bls.n	80044b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	73fb      	strb	r3, [r7, #15]
        break;
 80044b6:	e005      	b.n	80044c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044b8:	4b37      	ldr	r3, [pc, #220]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1ef      	bne.n	80044a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d160      	bne.n	800458c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d111      	bne.n	80044f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044d0:	4b31      	ldr	r3, [pc, #196]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6892      	ldr	r2, [r2, #8]
 80044e0:	0211      	lsls	r1, r2, #8
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68d2      	ldr	r2, [r2, #12]
 80044e6:	0912      	lsrs	r2, r2, #4
 80044e8:	0452      	lsls	r2, r2, #17
 80044ea:	430a      	orrs	r2, r1
 80044ec:	492a      	ldr	r1, [pc, #168]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	610b      	str	r3, [r1, #16]
 80044f2:	e027      	b.n	8004544 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d112      	bne.n	8004520 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044fa:	4b27      	ldr	r3, [pc, #156]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004502:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6892      	ldr	r2, [r2, #8]
 800450a:	0211      	lsls	r1, r2, #8
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6912      	ldr	r2, [r2, #16]
 8004510:	0852      	lsrs	r2, r2, #1
 8004512:	3a01      	subs	r2, #1
 8004514:	0552      	lsls	r2, r2, #21
 8004516:	430a      	orrs	r2, r1
 8004518:	491f      	ldr	r1, [pc, #124]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451a:	4313      	orrs	r3, r2
 800451c:	610b      	str	r3, [r1, #16]
 800451e:	e011      	b.n	8004544 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004520:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004528:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6892      	ldr	r2, [r2, #8]
 8004530:	0211      	lsls	r1, r2, #8
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6952      	ldr	r2, [r2, #20]
 8004536:	0852      	lsrs	r2, r2, #1
 8004538:	3a01      	subs	r2, #1
 800453a:	0652      	lsls	r2, r2, #25
 800453c:	430a      	orrs	r2, r1
 800453e:	4916      	ldr	r1, [pc, #88]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004540:	4313      	orrs	r3, r2
 8004542:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004544:	4b14      	ldr	r3, [pc, #80]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a13      	ldr	r2, [pc, #76]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 800454a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800454e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004550:	f7fd f990 	bl	8001874 <HAL_GetTick>
 8004554:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004556:	e009      	b.n	800456c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004558:	f7fd f98c 	bl	8001874 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d902      	bls.n	800456c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	73fb      	strb	r3, [r7, #15]
          break;
 800456a:	e005      	b.n	8004578 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ef      	beq.n	8004558 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	4904      	ldr	r1, [pc, #16]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004588:	4313      	orrs	r3, r2
 800458a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800458c:	7bfb      	ldrb	r3, [r7, #15]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40021000 	.word	0x40021000

0800459c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045aa:	4b6a      	ldr	r3, [pc, #424]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d018      	beq.n	80045e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045b6:	4b67      	ldr	r3, [pc, #412]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f003 0203 	and.w	r2, r3, #3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d10d      	bne.n	80045e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
       ||
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80045ce:	4b61      	ldr	r3, [pc, #388]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	091b      	lsrs	r3, r3, #4
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
       ||
 80045de:	429a      	cmp	r2, r3
 80045e0:	d047      	beq.n	8004672 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	73fb      	strb	r3, [r7, #15]
 80045e6:	e044      	b.n	8004672 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d018      	beq.n	8004622 <RCCEx_PLLSAI2_Config+0x86>
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d825      	bhi.n	8004640 <RCCEx_PLLSAI2_Config+0xa4>
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d002      	beq.n	80045fe <RCCEx_PLLSAI2_Config+0x62>
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d009      	beq.n	8004610 <RCCEx_PLLSAI2_Config+0x74>
 80045fc:	e020      	b.n	8004640 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045fe:	4b55      	ldr	r3, [pc, #340]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11d      	bne.n	8004646 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800460e:	e01a      	b.n	8004646 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004610:	4b50      	ldr	r3, [pc, #320]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004618:	2b00      	cmp	r3, #0
 800461a:	d116      	bne.n	800464a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004620:	e013      	b.n	800464a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004622:	4b4c      	ldr	r3, [pc, #304]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10f      	bne.n	800464e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800462e:	4b49      	ldr	r3, [pc, #292]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800463e:	e006      	b.n	800464e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
      break;
 8004644:	e004      	b.n	8004650 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004646:	bf00      	nop
 8004648:	e002      	b.n	8004650 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800464a:	bf00      	nop
 800464c:	e000      	b.n	8004650 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800464e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10d      	bne.n	8004672 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004656:	4b3f      	ldr	r3, [pc, #252]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6819      	ldr	r1, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	3b01      	subs	r3, #1
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	430b      	orrs	r3, r1
 800466c:	4939      	ldr	r1, [pc, #228]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 800466e:	4313      	orrs	r3, r2
 8004670:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d167      	bne.n	8004748 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004678:	4b36      	ldr	r3, [pc, #216]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a35      	ldr	r2, [pc, #212]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 800467e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004684:	f7fd f8f6 	bl	8001874 <HAL_GetTick>
 8004688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800468a:	e009      	b.n	80046a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800468c:	f7fd f8f2 	bl	8001874 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d902      	bls.n	80046a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	73fb      	strb	r3, [r7, #15]
        break;
 800469e:	e005      	b.n	80046ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046a0:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1ef      	bne.n	800468c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d14a      	bne.n	8004748 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d111      	bne.n	80046dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046b8:	4b26      	ldr	r3, [pc, #152]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6892      	ldr	r2, [r2, #8]
 80046c8:	0211      	lsls	r1, r2, #8
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68d2      	ldr	r2, [r2, #12]
 80046ce:	0912      	lsrs	r2, r2, #4
 80046d0:	0452      	lsls	r2, r2, #17
 80046d2:	430a      	orrs	r2, r1
 80046d4:	491f      	ldr	r1, [pc, #124]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	614b      	str	r3, [r1, #20]
 80046da:	e011      	b.n	8004700 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046dc:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6892      	ldr	r2, [r2, #8]
 80046ec:	0211      	lsls	r1, r2, #8
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6912      	ldr	r2, [r2, #16]
 80046f2:	0852      	lsrs	r2, r2, #1
 80046f4:	3a01      	subs	r2, #1
 80046f6:	0652      	lsls	r2, r2, #25
 80046f8:	430a      	orrs	r2, r1
 80046fa:	4916      	ldr	r1, [pc, #88]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004700:	4b14      	ldr	r3, [pc, #80]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a13      	ldr	r2, [pc, #76]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470c:	f7fd f8b2 	bl	8001874 <HAL_GetTick>
 8004710:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004712:	e009      	b.n	8004728 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004714:	f7fd f8ae 	bl	8001874 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d902      	bls.n	8004728 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	73fb      	strb	r3, [r7, #15]
          break;
 8004726:	e005      	b.n	8004734 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004728:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0ef      	beq.n	8004714 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004734:	7bfb      	ldrb	r3, [r7, #15]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800473a:	4b06      	ldr	r3, [pc, #24]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4904      	ldr	r1, [pc, #16]	; (8004754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004744:	4313      	orrs	r3, r2
 8004746:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004748:	7bfb      	ldrb	r3, [r7, #15]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000

08004758 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004758:	b480      	push	{r7}
 800475a:	b089      	sub	sp, #36	; 0x24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIx */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004774:	d10c      	bne.n	8004790 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004776:	4b6e      	ldr	r3, [pc, #440]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004780:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004788:	d112      	bne.n	80047b0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800478a:	4b6a      	ldr	r3, [pc, #424]	; (8004934 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	e00f      	b.n	80047b0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004796:	d10b      	bne.n	80047b0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004798:	4b65      	ldr	r3, [pc, #404]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80047a2:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047aa:	d101      	bne.n	80047b0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80047ac:	4b61      	ldr	r3, [pc, #388]	; (8004934 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80047ae:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f040 80b4 	bne.w	8004920 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047c2:	d003      	beq.n	80047cc <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047ca:	d135      	bne.n	8004838 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80047cc:	4b58      	ldr	r3, [pc, #352]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047d8:	f040 80a1 	bne.w	800491e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80047dc:	4b54      	ldr	r3, [pc, #336]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 809a 	beq.w	800491e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80047ea:	4b51      	ldr	r3, [pc, #324]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	091b      	lsrs	r3, r3, #4
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	3301      	adds	r3, #1
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80047fe:	4b4c      	ldr	r3, [pc, #304]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	0a1b      	lsrs	r3, r3, #8
 8004804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004808:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004810:	4b47      	ldr	r3, [pc, #284]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800481c:	2311      	movs	r3, #17
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e001      	b.n	8004826 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8004822:	2307      	movs	r3, #7
 8004824:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	fb03 f202 	mul.w	r2, r3, r2
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	fbb2 f3f3 	udiv	r3, r2, r3
 8004834:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004836:	e072      	b.n	800491e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d133      	bne.n	80048a6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800483e:	4b3c      	ldr	r3, [pc, #240]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800484a:	d169      	bne.n	8004920 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800484c:	4b38      	ldr	r3, [pc, #224]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d063      	beq.n	8004920 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004858:	4b35      	ldr	r3, [pc, #212]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	3301      	adds	r3, #1
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	fbb2 f3f3 	udiv	r3, r2, r3
 800486a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800486c:	4b30      	ldr	r3, [pc, #192]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	0a1b      	lsrs	r3, r3, #8
 8004872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004876:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10a      	bne.n	8004894 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800487e:	4b2c      	ldr	r3, [pc, #176]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800488a:	2311      	movs	r3, #17
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e001      	b.n	8004894 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004890:	2307      	movs	r3, #7
 8004892:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	fb03 f202 	mul.w	r2, r3, r2
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a2:	61fb      	str	r3, [r7, #28]
 80048a4:	e03c      	b.n	8004920 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ac:	d003      	beq.n	80048b6 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048b4:	d134      	bne.n	8004920 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80048b6:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048c2:	d12d      	bne.n	8004920 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80048c4:	4b1a      	ldr	r3, [pc, #104]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d027      	beq.n	8004920 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80048d0:	4b17      	ldr	r3, [pc, #92]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	3301      	adds	r3, #1
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80048e4:	4b12      	ldr	r3, [pc, #72]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ee:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10a      	bne.n	800490c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80048f6:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8004902:	2311      	movs	r3, #17
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	e001      	b.n	800490c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004908:	2307      	movs	r3, #7
 800490a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	fb03 f202 	mul.w	r2, r3, r2
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	fbb2 f3f3 	udiv	r3, r2, r3
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	e000      	b.n	8004920 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800491e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004920:	69fb      	ldr	r3, [r7, #28]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3724      	adds	r7, #36	; 0x24
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000
 8004934:	001fff68 	.word	0x001fff68

08004938 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d06c      	beq.n	8004a24 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fc fac6 	bl	8000ef0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	22ca      	movs	r2, #202	; 0xca
 8004972:	625a      	str	r2, [r3, #36]	; 0x24
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2253      	movs	r2, #83	; 0x53
 800497a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f9a0 	bl	8004cc2 <RTC_EnterInitMode>
 8004982:	4603      	mov	r3, r0
 8004984:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d14b      	bne.n	8004a24 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800499a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800499e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6899      	ldr	r1, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68d2      	ldr	r2, [r2, #12]
 80049c6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6919      	ldr	r1, [r3, #16]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	041a      	lsls	r2, r3, #16
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f9a3 	bl	8004d28 <RTC_ExitInitMode>
 80049e2:	4603      	mov	r3, r0
 80049e4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d11b      	bne.n	8004a24 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0203 	bic.w	r2, r2, #3
 80049fa:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69da      	ldr	r2, [r3, #28]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	22ff      	movs	r2, #255	; 0xff
 8004a1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a2e:	b590      	push	{r4, r7, lr}
 8004a30:	b087      	sub	sp, #28
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_RTC_SetTime+0x1a>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e08b      	b.n	8004b60 <HAL_RTC_SetTime+0x132>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	22ca      	movs	r2, #202	; 0xca
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2253      	movs	r2, #83	; 0x53
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f92a 	bl	8004cc2 <RTC_EnterInitMode>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004a72:	7cfb      	ldrb	r3, [r7, #19]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d163      	bne.n	8004b40 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d126      	bne.n	8004acc <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 f984 	bl	8004da4 <RTC_ByteToBcd2>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	785b      	ldrb	r3, [r3, #1]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 f97d 	bl	8004da4 <RTC_ByteToBcd2>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004aae:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	789b      	ldrb	r3, [r3, #2]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 f975 	bl	8004da4 <RTC_ByteToBcd2>
 8004aba:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004abc:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	78db      	ldrb	r3, [r3, #3]
 8004ac4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	e018      	b.n	8004afe <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d102      	bne.n	8004ae0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2200      	movs	r2, #0
 8004ade:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	785b      	ldrb	r3, [r3, #1]
 8004aea:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004aec:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004af2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	78db      	ldrb	r3, [r3, #3]
 8004af8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004b08:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004b0c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6899      	ldr	r1, [r3, #8]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f8f6 	bl	8004d28 <RTC_ExitInitMode>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	22ff      	movs	r2, #255	; 0xff
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004b48:	7cfb      	ldrb	r3, [r7, #19]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d103      	bne.n	8004b56 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004b5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd90      	pop	{r4, r7, pc}

08004b68 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_RTC_SetDate+0x1a>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e075      	b.n	8004c6e <HAL_RTC_SetDate+0x106>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10e      	bne.n	8004bb6 <HAL_RTC_SetDate+0x4e>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	785b      	ldrb	r3, [r3, #1]
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	f023 0310 	bic.w	r3, r3, #16
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	330a      	adds	r3, #10
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d11c      	bne.n	8004bf6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	78db      	ldrb	r3, [r3, #3]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 f8ef 	bl	8004da4 <RTC_ByteToBcd2>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	785b      	ldrb	r3, [r3, #1]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f8e8 	bl	8004da4 <RTC_ByteToBcd2>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004bd8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	789b      	ldrb	r3, [r3, #2]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f8e0 	bl	8004da4 <RTC_ByteToBcd2>
 8004be4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004be6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e00e      	b.n	8004c14 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	78db      	ldrb	r3, [r3, #3]
 8004bfa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	785b      	ldrb	r3, [r3, #1]
 8004c00:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c02:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c08:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	22ca      	movs	r2, #202	; 0xca
 8004c1a:	625a      	str	r2, [r3, #36]	; 0x24
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2253      	movs	r2, #83	; 0x53
 8004c22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f84c 	bl	8004cc2 <RTC_EnterInitMode>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004c2e:	7cfb      	ldrb	r3, [r7, #19]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10c      	bne.n	8004c4e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c3e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c42:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f86f 	bl	8004d28 <RTC_ExitInitMode>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	22ff      	movs	r2, #255	; 0xff
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004c56:	7cfb      	ldrb	r3, [r7, #19]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d103      	bne.n	8004c64 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004c6c:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd90      	pop	{r4, r7, pc}

08004c76 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c8c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004c8e:	f7fc fdf1 	bl	8001874 <HAL_GetTick>
 8004c92:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c94:	e009      	b.n	8004caa <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c96:	f7fc fded 	bl	8001874 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ca4:	d901      	bls.n	8004caa <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e007      	b.n	8004cba <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0ee      	beq.n	8004c96 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d120      	bne.n	8004d1e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004ce6:	f7fc fdc5 	bl	8001874 <HAL_GetTick>
 8004cea:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004cec:	e00d      	b.n	8004d0a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004cee:	f7fc fdc1 	bl	8001874 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cfc:	d905      	bls.n	8004d0a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2203      	movs	r2, #3
 8004d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <RTC_EnterInitMode+0x5c>
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d1e7      	bne.n	8004cee <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004d34:	4b1a      	ldr	r3, [pc, #104]	; (8004da0 <RTC_ExitInitMode+0x78>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4a19      	ldr	r2, [pc, #100]	; (8004da0 <RTC_ExitInitMode+0x78>)
 8004d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d3e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004d40:	4b17      	ldr	r3, [pc, #92]	; (8004da0 <RTC_ExitInitMode+0x78>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10c      	bne.n	8004d66 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff ff92 	bl	8004c76 <HAL_RTC_WaitForSynchro>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01e      	beq.n	8004d96 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	73fb      	strb	r3, [r7, #15]
 8004d64:	e017      	b.n	8004d96 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004d66:	4b0e      	ldr	r3, [pc, #56]	; (8004da0 <RTC_ExitInitMode+0x78>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	4a0d      	ldr	r2, [pc, #52]	; (8004da0 <RTC_ExitInitMode+0x78>)
 8004d6c:	f023 0320 	bic.w	r3, r3, #32
 8004d70:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff ff7f 	bl	8004c76 <HAL_RTC_WaitForSynchro>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2203      	movs	r2, #3
 8004d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004d8a:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <RTC_ExitInitMode+0x78>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	4a04      	ldr	r2, [pc, #16]	; (8004da0 <RTC_ExitInitMode+0x78>)
 8004d90:	f043 0320 	orr.w	r3, r3, #32
 8004d94:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40002800 	.word	0x40002800

08004da4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	4603      	mov	r3, r0
 8004dac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004db6:	e005      	b.n	8004dc4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004dbe:	7afb      	ldrb	r3, [r7, #11]
 8004dc0:	3b0a      	subs	r3, #10
 8004dc2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004dc4:	7afb      	ldrb	r3, [r7, #11]
 8004dc6:	2b09      	cmp	r3, #9
 8004dc8:	d8f6      	bhi.n	8004db8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	7afb      	ldrb	r3, [r7, #11]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	b2db      	uxtb	r3, r3
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e155      	b.n	80050a2 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fc f94a 	bl	80010a4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f959 	bl	80050c8 <SAI_Disable>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e140      	b.n	80050a2 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d00c      	beq.n	8004e4a <HAL_SAI_Init+0x66>
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d80d      	bhi.n	8004e50 <HAL_SAI_Init+0x6c>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_SAI_Init+0x5a>
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d003      	beq.n	8004e44 <HAL_SAI_Init+0x60>
 8004e3c:	e008      	b.n	8004e50 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61fb      	str	r3, [r7, #28]
      break;
 8004e42:	e008      	b.n	8004e56 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004e44:	2310      	movs	r3, #16
 8004e46:	61fb      	str	r3, [r7, #28]
      break;
 8004e48:	e005      	b.n	8004e56 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004e4a:	2320      	movs	r3, #32
 8004e4c:	61fb      	str	r3, [r7, #28]
      break;
 8004e4e:	e002      	b.n	8004e56 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61fb      	str	r3, [r7, #28]
      break;
 8004e54:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d81d      	bhi.n	8004e9a <HAL_SAI_Init+0xb6>
 8004e5e:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <HAL_SAI_Init+0x80>)
 8004e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e64:	08004e75 	.word	0x08004e75
 8004e68:	08004e7b 	.word	0x08004e7b
 8004e6c:	08004e83 	.word	0x08004e83
 8004e70:	08004e8b 	.word	0x08004e8b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]
      break;
 8004e78:	e012      	b.n	8004ea0 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e7e:	617b      	str	r3, [r7, #20]
      break;
 8004e80:	e00e      	b.n	8004ea0 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e86:	617b      	str	r3, [r7, #20]
      break;
 8004e88:	e00a      	b.n	8004ea0 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e8e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	61fb      	str	r3, [r7, #28]
      break;
 8004e98:	e002      	b.n	8004ea0 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]
      break;
 8004e9e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a81      	ldr	r2, [pc, #516]	; (80050ac <HAL_SAI_Init+0x2c8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_SAI_Init+0xd0>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a80      	ldr	r2, [pc, #512]	; (80050b0 <HAL_SAI_Init+0x2cc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d103      	bne.n	8004ebc <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004eb4:	4a7f      	ldr	r2, [pc, #508]	; (80050b4 <HAL_SAI_Init+0x2d0>)
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	e002      	b.n	8004ec2 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004ebc:	4a7e      	ldr	r2, [pc, #504]	; (80050b8 <HAL_SAI_Init+0x2d4>)
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d041      	beq.n	8004f4e <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a77      	ldr	r2, [pc, #476]	; (80050ac <HAL_SAI_Init+0x2c8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_SAI_Init+0xfa>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a75      	ldr	r2, [pc, #468]	; (80050b0 <HAL_SAI_Init+0x2cc>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d105      	bne.n	8004eea <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004ede:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ee2:	f7fe fcf9 	bl	80038d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ee6:	6138      	str	r0, [r7, #16]
 8004ee8:	e004      	b.n	8004ef4 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004eea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004eee:	f7fe fcf3 	bl	80038d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ef2:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	461a      	mov	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	025b      	lsls	r3, r3, #9
 8004f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0a:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a6b      	ldr	r2, [pc, #428]	; (80050bc <HAL_SAI_Init+0x2d8>)
 8004f10:	fba2 2303 	umull	r2, r3, r2, r3
 8004f14:	08da      	lsrs	r2, r3, #3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	4b67      	ldr	r3, [pc, #412]	; (80050bc <HAL_SAI_Init+0x2d8>)
 8004f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f22:	08da      	lsrs	r2, r3, #3
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	1aca      	subs	r2, r1, r3
 8004f2e:	2a08      	cmp	r2, #8
 8004f30:	d904      	bls.n	8004f3c <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d104      	bne.n	8004f4e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	085a      	lsrs	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_SAI_Init+0x17a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d109      	bne.n	8004f72 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <HAL_SAI_Init+0x186>
 8004f66:	2300      	movs	r3, #0
 8004f68:	e001      	b.n	8004f6e <HAL_SAI_Init+0x18a>
 8004f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f6e:	61bb      	str	r3, [r7, #24]
 8004f70:	e008      	b.n	8004f84 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d102      	bne.n	8004f80 <HAL_SAI_Init+0x19c>
 8004f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f7e:	e000      	b.n	8004f82 <HAL_SAI_Init+0x19e>
 8004f80:	2300      	movs	r3, #0
 8004f82:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	4b4c      	ldr	r3, [pc, #304]	; (80050c0 <HAL_SAI_Init+0x2dc>)
 8004f90:	400b      	ands	r3, r1
 8004f92:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6819      	ldr	r1, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004fa8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8004fbc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004fc8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	051b      	lsls	r3, r3, #20
 8004fd0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004fe8:	f023 030f 	bic.w	r3, r3, #15
 8004fec:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6859      	ldr	r1, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699a      	ldr	r2, [r3, #24]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6899      	ldr	r1, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4b2b      	ldr	r3, [pc, #172]	; (80050c4 <HAL_SAI_Init+0x2e0>)
 8005018:	400b      	ands	r3, r1
 800501a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6899      	ldr	r1, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800502c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005032:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005038:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	3b01      	subs	r3, #1
 8005040:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005042:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68d9      	ldr	r1, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	f24f 0320 	movw	r3, #61472	; 0xf020
 800505a:	400b      	ands	r3, r1
 800505c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68d9      	ldr	r1, [r3, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005072:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005074:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507a:	3b01      	subs	r3, #1
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3720      	adds	r7, #32
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40015404 	.word	0x40015404
 80050b0:	40015424 	.word	0x40015424
 80050b4:	40015400 	.word	0x40015400
 80050b8:	40015800 	.word	0x40015800
 80050bc:	cccccccd 	.word	0xcccccccd
 80050c0:	ff05c010 	.word	0xff05c010
 80050c4:	fff88000 	.word	0xfff88000

080050c8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80050d0:	4b18      	ldr	r3, [pc, #96]	; (8005134 <SAI_Disable+0x6c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a18      	ldr	r2, [pc, #96]	; (8005138 <SAI_Disable+0x70>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	0b1b      	lsrs	r3, r3, #12
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050f2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005100:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	72fb      	strb	r3, [r7, #11]
      break;
 800510e:	e009      	b.n	8005124 <SAI_Disable+0x5c>
    }
    count--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3b01      	subs	r3, #1
 8005114:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e7      	bne.n	80050f4 <SAI_Disable+0x2c>

  return status;
 8005124:	7afb      	ldrb	r3, [r7, #11]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20000000 	.word	0x20000000
 8005138:	95cbec1b 	.word	0x95cbec1b

0800513c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e095      	b.n	800527a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d108      	bne.n	8005168 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800515e:	d009      	beq.n	8005174 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	61da      	str	r2, [r3, #28]
 8005166:	e005      	b.n	8005174 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fc f83e 	bl	8001210 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051b4:	d902      	bls.n	80051bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	e002      	b.n	80051c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80051ca:	d007      	beq.n	80051dc <HAL_SPI_Init+0xa0>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051d4:	d002      	beq.n	80051dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005214:	431a      	orrs	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521e:	ea42 0103 	orr.w	r1, r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	f003 0204 	and.w	r2, r3, #4
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005258:	ea42 0103 	orr.w	r1, r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e040      	b.n	8005316 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7fc f9ed 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2224      	movs	r2, #36	; 0x24
 80052ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0201 	bic.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f82d 	bl	8005320 <UART_SetConfig>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e022      	b.n	8005316 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fad9 	bl	8005890 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f042 0201 	orr.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fb60 	bl	80059d4 <UART_CheckIdleState>
 8005314:	4603      	mov	r3, r0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005324:	b08a      	sub	sp, #40	; 0x28
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	431a      	orrs	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	431a      	orrs	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	4313      	orrs	r3, r2
 8005346:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4ba4      	ldr	r3, [pc, #656]	; (80055e0 <UART_SetConfig+0x2c0>)
 8005350:	4013      	ands	r3, r2
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	6812      	ldr	r2, [r2, #0]
 8005356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005358:	430b      	orrs	r3, r1
 800535a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a99      	ldr	r2, [pc, #612]	; (80055e4 <UART_SetConfig+0x2c4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005388:	4313      	orrs	r3, r2
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539c:	430a      	orrs	r2, r1
 800539e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a90      	ldr	r2, [pc, #576]	; (80055e8 <UART_SetConfig+0x2c8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d126      	bne.n	80053f8 <UART_SetConfig+0xd8>
 80053aa:	4b90      	ldr	r3, [pc, #576]	; (80055ec <UART_SetConfig+0x2cc>)
 80053ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	2b03      	cmp	r3, #3
 80053b6:	d81b      	bhi.n	80053f0 <UART_SetConfig+0xd0>
 80053b8:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <UART_SetConfig+0xa0>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	080053d1 	.word	0x080053d1
 80053c4:	080053e1 	.word	0x080053e1
 80053c8:	080053d9 	.word	0x080053d9
 80053cc:	080053e9 	.word	0x080053e9
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d6:	e116      	b.n	8005606 <UART_SetConfig+0x2e6>
 80053d8:	2302      	movs	r3, #2
 80053da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053de:	e112      	b.n	8005606 <UART_SetConfig+0x2e6>
 80053e0:	2304      	movs	r3, #4
 80053e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053e6:	e10e      	b.n	8005606 <UART_SetConfig+0x2e6>
 80053e8:	2308      	movs	r3, #8
 80053ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ee:	e10a      	b.n	8005606 <UART_SetConfig+0x2e6>
 80053f0:	2310      	movs	r3, #16
 80053f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f6:	e106      	b.n	8005606 <UART_SetConfig+0x2e6>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a7c      	ldr	r2, [pc, #496]	; (80055f0 <UART_SetConfig+0x2d0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d138      	bne.n	8005474 <UART_SetConfig+0x154>
 8005402:	4b7a      	ldr	r3, [pc, #488]	; (80055ec <UART_SetConfig+0x2cc>)
 8005404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005408:	f003 030c 	and.w	r3, r3, #12
 800540c:	2b0c      	cmp	r3, #12
 800540e:	d82d      	bhi.n	800546c <UART_SetConfig+0x14c>
 8005410:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <UART_SetConfig+0xf8>)
 8005412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005416:	bf00      	nop
 8005418:	0800544d 	.word	0x0800544d
 800541c:	0800546d 	.word	0x0800546d
 8005420:	0800546d 	.word	0x0800546d
 8005424:	0800546d 	.word	0x0800546d
 8005428:	0800545d 	.word	0x0800545d
 800542c:	0800546d 	.word	0x0800546d
 8005430:	0800546d 	.word	0x0800546d
 8005434:	0800546d 	.word	0x0800546d
 8005438:	08005455 	.word	0x08005455
 800543c:	0800546d 	.word	0x0800546d
 8005440:	0800546d 	.word	0x0800546d
 8005444:	0800546d 	.word	0x0800546d
 8005448:	08005465 	.word	0x08005465
 800544c:	2300      	movs	r3, #0
 800544e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005452:	e0d8      	b.n	8005606 <UART_SetConfig+0x2e6>
 8005454:	2302      	movs	r3, #2
 8005456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800545a:	e0d4      	b.n	8005606 <UART_SetConfig+0x2e6>
 800545c:	2304      	movs	r3, #4
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005462:	e0d0      	b.n	8005606 <UART_SetConfig+0x2e6>
 8005464:	2308      	movs	r3, #8
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546a:	e0cc      	b.n	8005606 <UART_SetConfig+0x2e6>
 800546c:	2310      	movs	r3, #16
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005472:	e0c8      	b.n	8005606 <UART_SetConfig+0x2e6>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a5e      	ldr	r2, [pc, #376]	; (80055f4 <UART_SetConfig+0x2d4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d125      	bne.n	80054ca <UART_SetConfig+0x1aa>
 800547e:	4b5b      	ldr	r3, [pc, #364]	; (80055ec <UART_SetConfig+0x2cc>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005488:	2b30      	cmp	r3, #48	; 0x30
 800548a:	d016      	beq.n	80054ba <UART_SetConfig+0x19a>
 800548c:	2b30      	cmp	r3, #48	; 0x30
 800548e:	d818      	bhi.n	80054c2 <UART_SetConfig+0x1a2>
 8005490:	2b20      	cmp	r3, #32
 8005492:	d00a      	beq.n	80054aa <UART_SetConfig+0x18a>
 8005494:	2b20      	cmp	r3, #32
 8005496:	d814      	bhi.n	80054c2 <UART_SetConfig+0x1a2>
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <UART_SetConfig+0x182>
 800549c:	2b10      	cmp	r3, #16
 800549e:	d008      	beq.n	80054b2 <UART_SetConfig+0x192>
 80054a0:	e00f      	b.n	80054c2 <UART_SetConfig+0x1a2>
 80054a2:	2300      	movs	r3, #0
 80054a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a8:	e0ad      	b.n	8005606 <UART_SetConfig+0x2e6>
 80054aa:	2302      	movs	r3, #2
 80054ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b0:	e0a9      	b.n	8005606 <UART_SetConfig+0x2e6>
 80054b2:	2304      	movs	r3, #4
 80054b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b8:	e0a5      	b.n	8005606 <UART_SetConfig+0x2e6>
 80054ba:	2308      	movs	r3, #8
 80054bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c0:	e0a1      	b.n	8005606 <UART_SetConfig+0x2e6>
 80054c2:	2310      	movs	r3, #16
 80054c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c8:	e09d      	b.n	8005606 <UART_SetConfig+0x2e6>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a4a      	ldr	r2, [pc, #296]	; (80055f8 <UART_SetConfig+0x2d8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d125      	bne.n	8005520 <UART_SetConfig+0x200>
 80054d4:	4b45      	ldr	r3, [pc, #276]	; (80055ec <UART_SetConfig+0x2cc>)
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054de:	2bc0      	cmp	r3, #192	; 0xc0
 80054e0:	d016      	beq.n	8005510 <UART_SetConfig+0x1f0>
 80054e2:	2bc0      	cmp	r3, #192	; 0xc0
 80054e4:	d818      	bhi.n	8005518 <UART_SetConfig+0x1f8>
 80054e6:	2b80      	cmp	r3, #128	; 0x80
 80054e8:	d00a      	beq.n	8005500 <UART_SetConfig+0x1e0>
 80054ea:	2b80      	cmp	r3, #128	; 0x80
 80054ec:	d814      	bhi.n	8005518 <UART_SetConfig+0x1f8>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <UART_SetConfig+0x1d8>
 80054f2:	2b40      	cmp	r3, #64	; 0x40
 80054f4:	d008      	beq.n	8005508 <UART_SetConfig+0x1e8>
 80054f6:	e00f      	b.n	8005518 <UART_SetConfig+0x1f8>
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054fe:	e082      	b.n	8005606 <UART_SetConfig+0x2e6>
 8005500:	2302      	movs	r3, #2
 8005502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005506:	e07e      	b.n	8005606 <UART_SetConfig+0x2e6>
 8005508:	2304      	movs	r3, #4
 800550a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800550e:	e07a      	b.n	8005606 <UART_SetConfig+0x2e6>
 8005510:	2308      	movs	r3, #8
 8005512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005516:	e076      	b.n	8005606 <UART_SetConfig+0x2e6>
 8005518:	2310      	movs	r3, #16
 800551a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800551e:	e072      	b.n	8005606 <UART_SetConfig+0x2e6>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a35      	ldr	r2, [pc, #212]	; (80055fc <UART_SetConfig+0x2dc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d12a      	bne.n	8005580 <UART_SetConfig+0x260>
 800552a:	4b30      	ldr	r3, [pc, #192]	; (80055ec <UART_SetConfig+0x2cc>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005534:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005538:	d01a      	beq.n	8005570 <UART_SetConfig+0x250>
 800553a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800553e:	d81b      	bhi.n	8005578 <UART_SetConfig+0x258>
 8005540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005544:	d00c      	beq.n	8005560 <UART_SetConfig+0x240>
 8005546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800554a:	d815      	bhi.n	8005578 <UART_SetConfig+0x258>
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <UART_SetConfig+0x238>
 8005550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005554:	d008      	beq.n	8005568 <UART_SetConfig+0x248>
 8005556:	e00f      	b.n	8005578 <UART_SetConfig+0x258>
 8005558:	2300      	movs	r3, #0
 800555a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800555e:	e052      	b.n	8005606 <UART_SetConfig+0x2e6>
 8005560:	2302      	movs	r3, #2
 8005562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005566:	e04e      	b.n	8005606 <UART_SetConfig+0x2e6>
 8005568:	2304      	movs	r3, #4
 800556a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800556e:	e04a      	b.n	8005606 <UART_SetConfig+0x2e6>
 8005570:	2308      	movs	r3, #8
 8005572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005576:	e046      	b.n	8005606 <UART_SetConfig+0x2e6>
 8005578:	2310      	movs	r3, #16
 800557a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800557e:	e042      	b.n	8005606 <UART_SetConfig+0x2e6>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a17      	ldr	r2, [pc, #92]	; (80055e4 <UART_SetConfig+0x2c4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d13a      	bne.n	8005600 <UART_SetConfig+0x2e0>
 800558a:	4b18      	ldr	r3, [pc, #96]	; (80055ec <UART_SetConfig+0x2cc>)
 800558c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005590:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005594:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005598:	d01a      	beq.n	80055d0 <UART_SetConfig+0x2b0>
 800559a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800559e:	d81b      	bhi.n	80055d8 <UART_SetConfig+0x2b8>
 80055a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a4:	d00c      	beq.n	80055c0 <UART_SetConfig+0x2a0>
 80055a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055aa:	d815      	bhi.n	80055d8 <UART_SetConfig+0x2b8>
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <UART_SetConfig+0x298>
 80055b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b4:	d008      	beq.n	80055c8 <UART_SetConfig+0x2a8>
 80055b6:	e00f      	b.n	80055d8 <UART_SetConfig+0x2b8>
 80055b8:	2300      	movs	r3, #0
 80055ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055be:	e022      	b.n	8005606 <UART_SetConfig+0x2e6>
 80055c0:	2302      	movs	r3, #2
 80055c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c6:	e01e      	b.n	8005606 <UART_SetConfig+0x2e6>
 80055c8:	2304      	movs	r3, #4
 80055ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ce:	e01a      	b.n	8005606 <UART_SetConfig+0x2e6>
 80055d0:	2308      	movs	r3, #8
 80055d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055d6:	e016      	b.n	8005606 <UART_SetConfig+0x2e6>
 80055d8:	2310      	movs	r3, #16
 80055da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055de:	e012      	b.n	8005606 <UART_SetConfig+0x2e6>
 80055e0:	efff69f3 	.word	0xefff69f3
 80055e4:	40008000 	.word	0x40008000
 80055e8:	40013800 	.word	0x40013800
 80055ec:	40021000 	.word	0x40021000
 80055f0:	40004400 	.word	0x40004400
 80055f4:	40004800 	.word	0x40004800
 80055f8:	40004c00 	.word	0x40004c00
 80055fc:	40005000 	.word	0x40005000
 8005600:	2310      	movs	r3, #16
 8005602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a9f      	ldr	r2, [pc, #636]	; (8005888 <UART_SetConfig+0x568>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d17a      	bne.n	8005706 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005610:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005614:	2b08      	cmp	r3, #8
 8005616:	d824      	bhi.n	8005662 <UART_SetConfig+0x342>
 8005618:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <UART_SetConfig+0x300>)
 800561a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561e:	bf00      	nop
 8005620:	08005645 	.word	0x08005645
 8005624:	08005663 	.word	0x08005663
 8005628:	0800564d 	.word	0x0800564d
 800562c:	08005663 	.word	0x08005663
 8005630:	08005653 	.word	0x08005653
 8005634:	08005663 	.word	0x08005663
 8005638:	08005663 	.word	0x08005663
 800563c:	08005663 	.word	0x08005663
 8005640:	0800565b 	.word	0x0800565b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005644:	f7fd fdd2 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8005648:	61f8      	str	r0, [r7, #28]
        break;
 800564a:	e010      	b.n	800566e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800564c:	4b8f      	ldr	r3, [pc, #572]	; (800588c <UART_SetConfig+0x56c>)
 800564e:	61fb      	str	r3, [r7, #28]
        break;
 8005650:	e00d      	b.n	800566e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005652:	f7fd fd33 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 8005656:	61f8      	str	r0, [r7, #28]
        break;
 8005658:	e009      	b.n	800566e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800565a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800565e:	61fb      	str	r3, [r7, #28]
        break;
 8005660:	e005      	b.n	800566e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800566c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80fb 	beq.w	800586c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	4613      	mov	r3, r2
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	4413      	add	r3, r2
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	429a      	cmp	r2, r3
 8005684:	d305      	bcc.n	8005692 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	429a      	cmp	r2, r3
 8005690:	d903      	bls.n	800569a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005698:	e0e8      	b.n	800586c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	2200      	movs	r2, #0
 800569e:	461c      	mov	r4, r3
 80056a0:	4615      	mov	r5, r2
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	022b      	lsls	r3, r5, #8
 80056ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80056b0:	0222      	lsls	r2, r4, #8
 80056b2:	68f9      	ldr	r1, [r7, #12]
 80056b4:	6849      	ldr	r1, [r1, #4]
 80056b6:	0849      	lsrs	r1, r1, #1
 80056b8:	2000      	movs	r0, #0
 80056ba:	4688      	mov	r8, r1
 80056bc:	4681      	mov	r9, r0
 80056be:	eb12 0a08 	adds.w	sl, r2, r8
 80056c2:	eb43 0b09 	adc.w	fp, r3, r9
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	603b      	str	r3, [r7, #0]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056d4:	4650      	mov	r0, sl
 80056d6:	4659      	mov	r1, fp
 80056d8:	f7fa fd76 	bl	80001c8 <__aeabi_uldivmod>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4613      	mov	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ea:	d308      	bcc.n	80056fe <UART_SetConfig+0x3de>
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056f2:	d204      	bcs.n	80056fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	60da      	str	r2, [r3, #12]
 80056fc:	e0b6      	b.n	800586c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005704:	e0b2      	b.n	800586c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570e:	d15e      	bne.n	80057ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005714:	2b08      	cmp	r3, #8
 8005716:	d828      	bhi.n	800576a <UART_SetConfig+0x44a>
 8005718:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <UART_SetConfig+0x400>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005745 	.word	0x08005745
 8005724:	0800574d 	.word	0x0800574d
 8005728:	08005755 	.word	0x08005755
 800572c:	0800576b 	.word	0x0800576b
 8005730:	0800575b 	.word	0x0800575b
 8005734:	0800576b 	.word	0x0800576b
 8005738:	0800576b 	.word	0x0800576b
 800573c:	0800576b 	.word	0x0800576b
 8005740:	08005763 	.word	0x08005763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005744:	f7fd fd52 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8005748:	61f8      	str	r0, [r7, #28]
        break;
 800574a:	e014      	b.n	8005776 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800574c:	f7fd fd64 	bl	8003218 <HAL_RCC_GetPCLK2Freq>
 8005750:	61f8      	str	r0, [r7, #28]
        break;
 8005752:	e010      	b.n	8005776 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005754:	4b4d      	ldr	r3, [pc, #308]	; (800588c <UART_SetConfig+0x56c>)
 8005756:	61fb      	str	r3, [r7, #28]
        break;
 8005758:	e00d      	b.n	8005776 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800575a:	f7fd fcaf 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 800575e:	61f8      	str	r0, [r7, #28]
        break;
 8005760:	e009      	b.n	8005776 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005766:	61fb      	str	r3, [r7, #28]
        break;
 8005768:	e005      	b.n	8005776 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005774:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d077      	beq.n	800586c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	005a      	lsls	r2, r3, #1
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	085b      	lsrs	r3, r3, #1
 8005786:	441a      	add	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	2b0f      	cmp	r3, #15
 8005796:	d916      	bls.n	80057c6 <UART_SetConfig+0x4a6>
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800579e:	d212      	bcs.n	80057c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f023 030f 	bic.w	r3, r3, #15
 80057a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	085b      	lsrs	r3, r3, #1
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	8afb      	ldrh	r3, [r7, #22]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	8afa      	ldrh	r2, [r7, #22]
 80057c2:	60da      	str	r2, [r3, #12]
 80057c4:	e052      	b.n	800586c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057cc:	e04e      	b.n	800586c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d827      	bhi.n	8005826 <UART_SetConfig+0x506>
 80057d6:	a201      	add	r2, pc, #4	; (adr r2, 80057dc <UART_SetConfig+0x4bc>)
 80057d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057dc:	08005801 	.word	0x08005801
 80057e0:	08005809 	.word	0x08005809
 80057e4:	08005811 	.word	0x08005811
 80057e8:	08005827 	.word	0x08005827
 80057ec:	08005817 	.word	0x08005817
 80057f0:	08005827 	.word	0x08005827
 80057f4:	08005827 	.word	0x08005827
 80057f8:	08005827 	.word	0x08005827
 80057fc:	0800581f 	.word	0x0800581f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005800:	f7fd fcf4 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8005804:	61f8      	str	r0, [r7, #28]
        break;
 8005806:	e014      	b.n	8005832 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005808:	f7fd fd06 	bl	8003218 <HAL_RCC_GetPCLK2Freq>
 800580c:	61f8      	str	r0, [r7, #28]
        break;
 800580e:	e010      	b.n	8005832 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005810:	4b1e      	ldr	r3, [pc, #120]	; (800588c <UART_SetConfig+0x56c>)
 8005812:	61fb      	str	r3, [r7, #28]
        break;
 8005814:	e00d      	b.n	8005832 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005816:	f7fd fc51 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 800581a:	61f8      	str	r0, [r7, #28]
        break;
 800581c:	e009      	b.n	8005832 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800581e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005822:	61fb      	str	r3, [r7, #28]
        break;
 8005824:	e005      	b.n	8005832 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005830:	bf00      	nop
    }

    if (pclk != 0U)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d019      	beq.n	800586c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	085a      	lsrs	r2, r3, #1
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	441a      	add	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	fbb2 f3f3 	udiv	r3, r2, r3
 800584a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	2b0f      	cmp	r3, #15
 8005850:	d909      	bls.n	8005866 <UART_SetConfig+0x546>
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005858:	d205      	bcs.n	8005866 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60da      	str	r2, [r3, #12]
 8005864:	e002      	b.n	800586c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005878:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800587c:	4618      	mov	r0, r3
 800587e:	3728      	adds	r7, #40	; 0x28
 8005880:	46bd      	mov	sp, r7
 8005882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005886:	bf00      	nop
 8005888:	40008000 	.word	0x40008000
 800588c:	00f42400 	.word	0x00f42400

08005890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	f003 0310 	and.w	r3, r3, #16
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01a      	beq.n	80059a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800598e:	d10a      	bne.n	80059a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	605a      	str	r2, [r3, #4]
  }
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af02      	add	r7, sp, #8
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059e4:	f7fb ff46 	bl	8001874 <HAL_GetTick>
 80059e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d10e      	bne.n	8005a16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f82d 	bl	8005a66 <UART_WaitOnFlagUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e023      	b.n	8005a5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d10e      	bne.n	8005a42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f817 	bl	8005a66 <UART_WaitOnFlagUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e00d      	b.n	8005a5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b09c      	sub	sp, #112	; 0x70
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a76:	e0a5      	b.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7e:	f000 80a1 	beq.w	8005bc4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a82:	f7fb fef7 	bl	8001874 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d302      	bcc.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d13e      	bne.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005aac:	667b      	str	r3, [r7, #100]	; 0x64
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ab8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005abc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e6      	bne.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3308      	adds	r3, #8
 8005ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005aea:	64ba      	str	r2, [r7, #72]	; 0x48
 8005aec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005af0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e5      	bne.n	8005aca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2220      	movs	r2, #32
 8005b02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e067      	b.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d04f      	beq.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b32:	d147      	bne.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b3c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e6      	bne.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3308      	adds	r3, #8
 8005b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f023 0301 	bic.w	r3, r3, #1
 8005b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b90:	623a      	str	r2, [r7, #32]
 8005b92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	69f9      	ldr	r1, [r7, #28]
 8005b96:	6a3a      	ldr	r2, [r7, #32]
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e5      	bne.n	8005b70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2220      	movs	r2, #32
 8005bae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e010      	b.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2301      	moveq	r3, #1
 8005bd6:	2300      	movne	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	f43f af4a 	beq.w	8005a78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3770      	adds	r7, #112	; 0x70
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <__libc_init_array>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	4d0d      	ldr	r5, [pc, #52]	; (8005c28 <__libc_init_array+0x38>)
 8005bf4:	4c0d      	ldr	r4, [pc, #52]	; (8005c2c <__libc_init_array+0x3c>)
 8005bf6:	1b64      	subs	r4, r4, r5
 8005bf8:	10a4      	asrs	r4, r4, #2
 8005bfa:	2600      	movs	r6, #0
 8005bfc:	42a6      	cmp	r6, r4
 8005bfe:	d109      	bne.n	8005c14 <__libc_init_array+0x24>
 8005c00:	4d0b      	ldr	r5, [pc, #44]	; (8005c30 <__libc_init_array+0x40>)
 8005c02:	4c0c      	ldr	r4, [pc, #48]	; (8005c34 <__libc_init_array+0x44>)
 8005c04:	f000 f820 	bl	8005c48 <_init>
 8005c08:	1b64      	subs	r4, r4, r5
 8005c0a:	10a4      	asrs	r4, r4, #2
 8005c0c:	2600      	movs	r6, #0
 8005c0e:	42a6      	cmp	r6, r4
 8005c10:	d105      	bne.n	8005c1e <__libc_init_array+0x2e>
 8005c12:	bd70      	pop	{r4, r5, r6, pc}
 8005c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c18:	4798      	blx	r3
 8005c1a:	3601      	adds	r6, #1
 8005c1c:	e7ee      	b.n	8005bfc <__libc_init_array+0xc>
 8005c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c22:	4798      	blx	r3
 8005c24:	3601      	adds	r6, #1
 8005c26:	e7f2      	b.n	8005c0e <__libc_init_array+0x1e>
 8005c28:	08005cb0 	.word	0x08005cb0
 8005c2c:	08005cb0 	.word	0x08005cb0
 8005c30:	08005cb0 	.word	0x08005cb0
 8005c34:	08005cb4 	.word	0x08005cb4

08005c38 <memset>:
 8005c38:	4402      	add	r2, r0
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d100      	bne.n	8005c42 <memset+0xa>
 8005c40:	4770      	bx	lr
 8005c42:	f803 1b01 	strb.w	r1, [r3], #1
 8005c46:	e7f9      	b.n	8005c3c <memset+0x4>

08005c48 <_init>:
 8005c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4a:	bf00      	nop
 8005c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4e:	bc08      	pop	{r3}
 8005c50:	469e      	mov	lr, r3
 8005c52:	4770      	bx	lr

08005c54 <_fini>:
 8005c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c56:	bf00      	nop
 8005c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5a:	bc08      	pop	{r3}
 8005c5c:	469e      	mov	lr, r3
 8005c5e:	4770      	bx	lr
